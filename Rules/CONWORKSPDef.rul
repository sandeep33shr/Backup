        Dim iObjectInstanceCount
        
        Sub FindObjectInstanceCount(strScreenObjectName)
        	iObjectInstanceCount = 1
        
        	' strScreenObjectName is the object that is associate with this screen (if a child), or "" if the root screen.
        	If strScreenObjectName <> ""  Then
        		Dim instanceCount
        		
        		' How many instance of this object exist?
        		instanceCount = engine.count(strScreenObjectName)
        		
        		Dim i
        		for i = 1 to instanceCount
        			if engine.item(strScreenObjectName, i).item("OI").value = vAdditionalData(cAdditionalData_OIKey) then
        				iObjectInstanceCount = i
        			end if
        		next
        	End If
        End Sub

        Sub DefaultTextTo(strSourceObject, strSourceProperty, strValue, strIgnore)
        	Engine.Item(strSourceObject, iObjectInstanceCount).Item(strSourceProperty).Value = strValue
        End Sub

        
        Sub DefaultCommentTo(strSourceObject, strSourceProperty, strValue, strIgnore)
        	Engine.Item(strSourceObject, iObjectInstanceCount).Item(strSourceProperty).Value = strValue
        End Sub

        
        Sub DefaultIntegerTo(strSourceObject, strSourceProperty, strValue, strIgnore)
        	Engine.Item(strSourceObject, iObjectInstanceCount).Item(strSourceProperty).Value = CLng(strValue)
        End Sub

        
        Sub DefaultCheckboxTo(strSourceObject, strSourceProperty, strValue, strIgnore)
        	Engine.Item(strSourceObject, iObjectInstanceCount).Item(strSourceProperty).Value = CInt(strValue)
        End Sub

        
        Sub DefaultBooleanListTo(strSourceObject, strSourceProperty, strValue, strIgnore)
        	Engine.Item(strSourceObject, iObjectInstanceCount).Item(strSourceProperty).Value = CInt(strValue)
        End Sub

        
        Sub DefaultBooleanRadioTo(strSourceObject, strSourceProperty, strValue, strIgnore)
        	Engine.Item(strSourceObject, iObjectInstanceCount).Item(strSourceProperty).Value = CInt(strValue)
        End Sub

        
        Sub DefaultListTo(strSourceObject, strSourceProperty, strValue, strListCode)
        	If InStr(1, LCase(strValue), "code:", 1) = 1 Then
        		' The default value has been specified as a code (code:<thecode>).
        		Dim code
        		Dim effectiveDate
        		Dim version
        		
        		code = Mid(strValue, Len("code:")+1)
        		effectiveDate = Now()
        		version = 1
        		
        		Dim listItemId
        		listItemId = Extras.GetField(strListCode, strListCode + "_Id", code, effectiveDate, version)
        		
        		Engine.Item(strSourceObject, iObjectInstanceCount).Item(strSourceProperty).Value = CInt(listItemId)
        	Else
        		Engine.Item(strSourceObject, iObjectInstanceCount).Item(strSourceProperty).Value = CInt(strValue)
        	End If
        End Sub

        
        Sub DefaultRateListTo(strSourceObject, strSourceProperty, strValue, strListCode)
        	' TODO.
        End Sub

        
        Sub DefaultDateTo(strSourceObject, strSourceProperty, strValue, strIgnore)
        	
        	Dim location
        	Dim Interval
        	Dim Duration
        	Dim DateValue
        	
        	'Upper case the input
        	DateValue = UCase(strValue)
        	'Check to see if we want data AND  Time
        	location = InStr(1,DateValue,"DATETIME")
        	if location > 0 then
        		DateValue=  CDate(FormatDateTime(Now,0)) 'use the standard vb datetime
        	End If
        	'Check to see if TODAY is specified as a modifier
        	location  = InStr(1,DateValue,"TODAY")
        	If location > 0 Then
        		'Determine if we are adding values
        		location  = InStr(1,DateValue,"+")
        		If location > 0 Then 
        			Interval = Mid(DateValue,location + 1,1)
        			
        			If Interval = "Y" Then
        				Interval = "YYYY"
        			End If
        			
        			If Interval <> "" Then 
        				Duration  = Mid(DateValue,location + 2,Len(DateValue) - (location+1))
        				DateValue = DateAdd(Interval,Duration,CDate(FormatDateTime(Now,2)))	
        				
        			Else
        				'No Interval specified 
        				'Need an error here!!!!
        			End If	
        		Else 
        			'Check to see if we are subtracting values
        			location  =InStr(1,DateValue,"-")
        			If location > 0  Then 
        				Interval = Mid(DateValue,location + 1,1)
        				
        				If Interval <> "" Then 
        					Duration  = Mid(DateValue,location + 2,Len(DateValue) - (location+1))
        					DateValue = DateAdd(Interval, Duration * -1,CDate(FormatDateTime(Now,2)))	
        				Else
        					'No Interval specified 
        					'Need an error here!!!!
        				End If
        			Else
        				'No Function specified, so assume we are just using today's date as a shortdate
        				DateValue = CDate(FormatDateTime(Now,2))
        			End If
        			
        		End If
        		
        	End If	
        	
        	Engine.Item(strSourceObject, iObjectInstanceCount).Item(strSourceProperty).Value = CDate(DateValue)
        End Sub

        
        Sub DefaultCurrencyTo(strSourceObject, strSourceProperty, strValue, strIgnore)
        	Engine.Item(strSourceObject, iObjectInstanceCount).Item(strSourceProperty).Value = CDbl(strValue)
        End Sub

        
        Sub DefaultPercentageTo(strSourceObject, strSourceProperty, strValue, strIgnore)
        	Engine.Item(strSourceObject, iObjectInstanceCount).Item(strSourceProperty).Value = CDbl(strValue)
        End Sub

Sub WebRequired(bIsOnStart)
	If bIsOnStart = True Then
		Engine.NewObject("CWIRSK")
		Engine.NewObject("ADDRESS")
		Engine.NewObject("RISKDETAILS")
		Engine.NewObject("COREINSURA")
		Engine.NewObject("EXT_ADDCP")
		Engine.NewObject("EXT_ADDDR")
		Engine.NewObject("EXT_ADDREC")
		Engine.NewObject("EXT_CONDEF")
		Engine.NewObject("EXT_DEFCON")
		Engine.NewObject("EXT_DEFEXC")
		Engine.NewObject("EXT_ESC")
		Engine.NewObject("EXT_EXPEXP")
		Engine.NewObject("EXT_MITEXP")
		Engine.NewObject("EXT_POSTL")
		Engine.NewObject("EXT_PRINC")
		Engine.NewObject("EXT_PROF")
		Engine.NewObject("EXT_SURR")
		Engine.NewObject("EXT_TEMPS")
		Engine.NewObject("EXT_TRANSIT")
		Engine.NewObject("EXT_OPENL")
		Engine.NewObject("EXT_OPENT")
		Engine.NewObject("EXT_TOT")
		Engine.NewObject("OTHEXTL")
		Engine.NewObject("CWC")
		Engine.NewObject("NOTES")
		Engine.NewObject("EX_NOTES")
		Engine.NewObject("EMPDE")
		Engine.NewObject("ADVANCE")
		Engine.NewObject("RISKDETAIL")
		Engine.NewObject("CPLRISK")
		Engine.NewObject("TOTCHLD")
		Engine.NewObject("CONPREM")
		Engine.NewObject("REINSURAN")
		Engine.NewObject("REINSESC")
		Engine.NewObject("REINSPLE")
		Engine.NewObject("REINSACP")
		Engine.NewObject("REINSSPM")
		Engine.NewObject("REINSARC")
		Engine.NewObject("REINSPF")
		Engine.NewObject("REINSOE")
		Engine.NewObject("REINSTRE")
		Engine.NewObject("REINSURANX")
		Engine.NewObject("REINSESCX")
		Engine.NewObject("REINSTREX")
	End If
End Sub

Sub onScreenLogic(bIsOnStart)
        ' The ScreenMain rule is added to every screen automatically.
        
        
        Call FindObjectInstanceCount("")
End Sub

Sub onValidate_CWIRSK__IS_VAT(bIsOnStart)
        If bIsOnStart = True Then
        	Call DefaultListTo("CWIRSK", "IS_VAT", "1", "UDL_CMA_VAT")
        End If
End Sub

Sub onValidate_CWIRSK__CONTALLRKS(bIsOnStart)
        If bIsOnStart = True Then
        	Call DefaultCheckboxTo("CWIRSK", "CONTALLRKS", "0", "{listcode}")
        End If
End Sub

Sub onValidate_CWIRSK__ERECALLRKS(bIsOnStart)
        If bIsOnStart = True Then
        	Call DefaultCheckboxTo("CWIRSK", "ERECALLRKS", "0", "{listcode}")
        End If
End Sub

Sub onValidate_CWIRSK__CONPUBLIA(bIsOnStart)
        If bIsOnStart = True Then
        	Call DefaultCheckboxTo("CWIRSK", "CONPUBLIA", "0", "{listcode}")
        End If
End Sub

Sub onValidate_CWIRSK__ADVLOP(bIsOnStart)
        If bIsOnStart = True Then
        	Call DefaultCheckboxTo("CWIRSK", "ADVLOP", "0", "{listcode}")
        End If
End Sub

Sub onValidate_CWIRSK__COREINSIN(bIsOnStart)
        If bIsOnStart = True Then
        	Call DefaultCheckboxTo("CWIRSK", "COREINSIN", "0", "{listcode}")
        End If
End Sub

Sub onValidate_RISKDETAILS__TOTAL_EST_TURN(bIsOnStart)
        If bIsOnStart = True Then
        	Call DefaultCurrencyTo("RISKDETAILS", "TOTAL_EST_TURN", "0", "{listcode}")
        End If
End Sub

Sub onValidate_RISKDETAILS__TOTPREMIUM_LIM(bIsOnStart)
        If bIsOnStart = True Then
        	Call DefaultCurrencyTo("RISKDETAILS", "TOTPREMIUM_LIM", "0", "{listcode}")
        End If
End Sub

Sub onValidate_RISKDETAILS__MINI_PREM(bIsOnStart)
        If bIsOnStart = True Then
        	Call DefaultCurrencyTo("RISKDETAILS", "MINI_PREM", "500", "{listcode}")
        End If
End Sub

Sub onValidate_RISKDETAILS__FINAL_PREM(bIsOnStart)
        If bIsOnStart = True Then
        	Call DefaultCurrencyTo("RISKDETAILS", "FINAL_PREM", "0", "{listcode}")
        End If
End Sub

Sub onValidate_EXT_ADDCP__ADDCLAIMSPREP(bIsOnStart)
        If bIsOnStart = True Then
        	Call DefaultCheckboxTo("EXT_ADDCP", "ADDCLAIMSPREP", "0", "{listcode}")
        End If
End Sub

Sub onValidate_EXT_ADDDR__ADDDEBRISREM(bIsOnStart)
        If bIsOnStart = True Then
        	Call DefaultCheckboxTo("EXT_ADDDR", "ADDDEBRISREM", "0", "{listcode}")
        End If
End Sub

Sub onValidate_EXT_ADDREC__ADDRECONST(bIsOnStart)
        If bIsOnStart = True Then
        	Call DefaultCheckboxTo("EXT_ADDREC", "ADDRECONST", "0", "{listcode}")
        End If
End Sub

Sub onValidate_EXT_CONDEF__CONTINGENCY(bIsOnStart)
        If bIsOnStart = True Then
        	Call DefaultCheckboxTo("EXT_CONDEF", "CONTINGENCY", "0", "{listcode}")
        End If
End Sub

Sub onValidate_EXT_DEFCON__DIFFCONDITIONS(bIsOnStart)
        If bIsOnStart = True Then
        	Call DefaultCheckboxTo("EXT_DEFCON", "DIFFCONDITIONS", "0", "{listcode}")
        End If
End Sub

Sub onValidate_EXT_DEFEXC__DIFFEXCESS(bIsOnStart)
        If bIsOnStart = True Then
        	Call DefaultCheckboxTo("EXT_DEFEXC", "DIFFEXCESS", "0", "{listcode}")
        End If
End Sub

Sub onValidate_EXT_ESC__ESCALATION(bIsOnStart)
        If bIsOnStart = True Then
        	Call DefaultCheckboxTo("EXT_ESC", "ESCALATION", "0", "{listcode}")
        End If
End Sub

Sub onValidate_EXT_EXPEXP__EXPEDITINGEXP(bIsOnStart)
        If bIsOnStart = True Then
        	Call DefaultCheckboxTo("EXT_EXPEXP", "EXPEDITINGEXP", "0", "{listcode}")
        End If
End Sub

Sub onValidate_EXT_MITEXP__MITIGATIONEXP(bIsOnStart)
        If bIsOnStart = True Then
        	Call DefaultCheckboxTo("EXT_MITEXP", "MITIGATIONEXP", "0", "{listcode}")
        End If
End Sub

Sub onValidate_EXT_POSTL__POSTLOSSESC(bIsOnStart)
        If bIsOnStart = True Then
        	Call DefaultCheckboxTo("EXT_POSTL", "POSTLOSSESC", "0", "{listcode}")
        End If
End Sub

Sub onValidate_EXT_PRINC__PRINCOWNSURR(bIsOnStart)
        If bIsOnStart = True Then
        	Call DefaultCheckboxTo("EXT_PRINC", "PRINCOWNSURR", "0", "{listcode}")
        End If
End Sub

Sub onValidate_EXT_PROF__PROFESSIONALFEE(bIsOnStart)
        If bIsOnStart = True Then
        	Call DefaultCheckboxTo("EXT_PROF", "PROFESSIONALFEE", "0", "{listcode}")
        End If
End Sub

Sub onValidate_EXT_SURR__SURROUNDINGPROP(bIsOnStart)
        If bIsOnStart = True Then
        	Call DefaultCheckboxTo("EXT_SURR", "SURROUNDINGPROP", "0", "{listcode}")
        End If
End Sub

Sub onValidate_EXT_TEMPS__TEMPSTORAGE(bIsOnStart)
        If bIsOnStart = True Then
        	Call DefaultCheckboxTo("EXT_TEMPS", "TEMPSTORAGE", "0", "{listcode}")
        End If
End Sub

Sub onValidate_EXT_TRANSIT__TRANSITLIABILTIY(bIsOnStart)
        If bIsOnStart = True Then
        	Call DefaultCheckboxTo("EXT_TRANSIT", "TRANSITLIABILTIY", "0", "{listcode}")
        End If
End Sub

Sub onValidate_EXT_OPENL__OPENLAYERLIM(bIsOnStart)
        If bIsOnStart = True Then
        	Call DefaultCheckboxTo("EXT_OPENL", "OPENLAYERLIM", "0", "{listcode}")
        End If
End Sub

Sub onValidate_EXT_OPENT__OPENTRENCHLIM(bIsOnStart)
        If bIsOnStart = True Then
        	Call DefaultCheckboxTo("EXT_OPENT", "OPENTRENCHLIM", "0", "{listcode}")
        End If
End Sub

Sub onValidate_CPLRISK__IS_DUS(bIsOnStart)
        If bIsOnStart = True Then
        	Call DefaultCheckboxTo("CPLRISK", "IS_DUS", "0", "{listcode}")
        End If
End Sub

Sub onValidate_CPLRISK__THRDPARTY(bIsOnStart)
        If bIsOnStart = True Then
        	Call DefaultCheckboxTo("CPLRISK", "THRDPARTY", "0", "{listcode}")
        End If
End Sub

Sub onValidate_CPLRISK__THDPINJURY(bIsOnStart)
        If bIsOnStart = True Then
        	Call DefaultCheckboxTo("CPLRISK", "THDPINJURY", "0", "{listcode}")
        End If
End Sub

Sub onValidate_CPLRISK__BDAMAGE(bIsOnStart)
        If bIsOnStart = True Then
        	Call DefaultCheckboxTo("CPLRISK", "BDAMAGE", "0", "{listcode}")
        End If
End Sub

Sub onValidate_CPLRISK__BDSFIRE(bIsOnStart)
        If bIsOnStart = True Then
        	Call DefaultCheckboxTo("CPLRISK", "BDSFIRE", "0", "{listcode}")
        End If
End Sub

Sub onValidate_CPLRISK__LEGALDEFCOST(bIsOnStart)
        If bIsOnStart = True Then
        	Call DefaultCheckboxTo("CPLRISK", "LEGALDEFCOST", "0", "{listcode}")
        End If
End Sub

Sub onValidate_CPLRISK__SPREADFIRE1(bIsOnStart)
        If bIsOnStart = True Then
        	Call DefaultCheckboxTo("CPLRISK", "SPREADFIRE1", "0", "{listcode}")
        End If
End Sub

Sub onValidate_CPLRISK__WRONGFULARR(bIsOnStart)
        If bIsOnStart = True Then
        	Call DefaultCheckboxTo("CPLRISK", "WRONGFULARR", "0", "{listcode}")
        End If
End Sub

Sub DoDefaults(bIsOnStart)
    Call WebRequired(bIsOnStart)
    Call onScreenLogic(bIsOnStart)
    Call onValidate_CWIRSK__IS_VAT(bIsOnStart)
    Call onValidate_CWIRSK__CONTALLRKS(bIsOnStart)
    Call onValidate_CWIRSK__ERECALLRKS(bIsOnStart)
    Call onValidate_CWIRSK__CONPUBLIA(bIsOnStart)
    Call onValidate_CWIRSK__ADVLOP(bIsOnStart)
    Call onValidate_CWIRSK__COREINSIN(bIsOnStart)
    Call onValidate_RISKDETAILS__TOTAL_EST_TURN(bIsOnStart)
    Call onValidate_RISKDETAILS__TOTPREMIUM_LIM(bIsOnStart)
    Call onValidate_RISKDETAILS__MINI_PREM(bIsOnStart)
    Call onValidate_RISKDETAILS__FINAL_PREM(bIsOnStart)
    Call onValidate_EXT_ADDCP__ADDCLAIMSPREP(bIsOnStart)
    Call onValidate_EXT_ADDDR__ADDDEBRISREM(bIsOnStart)
    Call onValidate_EXT_ADDREC__ADDRECONST(bIsOnStart)
    Call onValidate_EXT_CONDEF__CONTINGENCY(bIsOnStart)
    Call onValidate_EXT_DEFCON__DIFFCONDITIONS(bIsOnStart)
    Call onValidate_EXT_DEFEXC__DIFFEXCESS(bIsOnStart)
    Call onValidate_EXT_ESC__ESCALATION(bIsOnStart)
    Call onValidate_EXT_EXPEXP__EXPEDITINGEXP(bIsOnStart)
    Call onValidate_EXT_MITEXP__MITIGATIONEXP(bIsOnStart)
    Call onValidate_EXT_POSTL__POSTLOSSESC(bIsOnStart)
    Call onValidate_EXT_PRINC__PRINCOWNSURR(bIsOnStart)
    Call onValidate_EXT_PROF__PROFESSIONALFEE(bIsOnStart)
    Call onValidate_EXT_SURR__SURROUNDINGPROP(bIsOnStart)
    Call onValidate_EXT_TEMPS__TEMPSTORAGE(bIsOnStart)
    Call onValidate_EXT_TRANSIT__TRANSITLIABILTIY(bIsOnStart)
    Call onValidate_EXT_OPENL__OPENLAYERLIM(bIsOnStart)
    Call onValidate_EXT_OPENT__OPENTRENCHLIM(bIsOnStart)
    Call onValidate_CPLRISK__IS_DUS(bIsOnStart)
    Call onValidate_CPLRISK__THRDPARTY(bIsOnStart)
    Call onValidate_CPLRISK__THDPINJURY(bIsOnStart)
    Call onValidate_CPLRISK__BDAMAGE(bIsOnStart)
    Call onValidate_CPLRISK__BDSFIRE(bIsOnStart)
    Call onValidate_CPLRISK__LEGALDEFCOST(bIsOnStart)
    Call onValidate_CPLRISK__SPREADFIRE1(bIsOnStart)
    Call onValidate_CPLRISK__WRONGFULARR(bIsOnStart)
End Sub

Sub Start()
    Call DoDefaults(True)
End Sub

Sub Main()
    Call DoDefaults(False)
End Sub

