        '**********************************************************************************************
        'Load Defaults from UDLs
        '**********************************************************************************************
        Sub GetClaimUserLevel()
         Dim vResult
         Dim sSQL 
         Dim iUserName
         Dim UserAuthorityGroup
         iUserName = Extras.Username
        	
        	sSQL = "SELECT usergroup FROM UDL_CLAIM_UGA WHERE code = '" & iUserName & "'" 	
        	Call Extras.CallNamedStoredProcedure(4033, "RetrieveData", vResult, Array("sSQL", sSQL))
        		
        	If IsArray(vResult) Then
        			UserAuthorityGroup = vResult(0, 0)
        	End If
        	
        	'Assign Defaults Claim User Group Value
        	With Engine.Item("GENERAL")
        		'Extras.Username Extras.GetField("UDL_CLAIM_UGA", "usergroup", Extras.Username,Extras.CoverStartDate)
        		.Item("UserGroup").Value = UserAuthorityGroup 
        		
        		If (.Item("SALVAGESTAT").Value ="") Or IsNull(.Item("SALVAGESTAT").Value) Then
                    .Item("SALVAGESTAT").Value = 1
                End If 
        		
        		If (.Item("LEGALSTAT").Value ="") Or IsNull(.Item("LEGALSTAT").Value) Then
                    .Item("LEGALSTAT").Value = 15
                End If
        		
        		If (.Item("CLMDECISION").Value ="") Or IsNull(.Item("CLMDECISION").Value) Then
                    .Item("CLMDECISION").Value = 5
                End If
        		
        		
        	End With
        	
        End Sub

        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        '**********************************************************************************************
        'Load Risk Data to Claim Screens
        '**********************************************************************************************
        Sub PullFromRiskMT()
        	
        	Dim iTotalCount
        	Dim iCount
        	
        	'GENERAL
        	Engine.Item("GENERAL").Item("ATTACHMENTDATE").Value = Extras.RiskDataEngine.Item("GENERAL").Item("ATTACHMENTDATE").Value 
        	Engine.Item("GENERAL").Item("EFFECTIVEDATE").Value = Extras.RiskDataEngine.Item("GENERAL").Item("EFFECTIVEDATE").Value 
        	Engine.Item("GENERAL").Item("IS_VAT").Value = Extras.RiskDataEngine.Item("GENERAL").Item("IS_VAT").Value  
        	
        	Engine.Item("GENERAL").Item("PRIMARY_INDUSTRY").Value = Extras.RiskDataEngine.Item("GENERAL").Item("PRIMARY_INDUSTRY").Value 
        	Engine.Item("GENERAL").Item("SECOND_INDUSTRY").Value = Extras.RiskDataEngine.Item("GENERAL").Item("SECOND_INDUSTRY").Value 
        	Engine.Item("GENERAL").Item("TERTIARY_INDUSTRY").Value = Extras.RiskDataEngine.Item("GENERAL").Item("TERTIARY_INDUSTRY").Value 
        	Engine.Item("GENERAL").Item("INDUSTRY").Value = Extras.RiskDataEngine.Item("GENERAL").Item("INDUSTRY").Value 
        	
        	Engine.Item("ADDRESS").Item("ADDRESSLIST").Value = Extras.RiskDataEngine.Item("ADDRESS").Item("ADDRESSLIST").Value 
        	Engine.Item("ADDRESS").Item("SITEADDRESSLIST").Value = Extras.RiskDataEngine.Item("ADDRESS").Item("SITEADDRESSLIST").Value 
        	Engine.Item("ADDRESS").Item("HOMEADDRESSLIST").Value = Extras.RiskDataEngine.Item("ADDRESS").Item("HOMEADDRESSLIST").Value 
        	Engine.Item("ADDRESS").Item("B_ADDRESSLIST").Value = Extras.RiskDataEngine.Item("ADDRESS").Item("B_ADDRESSLIST").Value 
        	Engine.Item("ADDRESS").Item("LINE1").Value = Extras.RiskDataEngine.Item("ADDRESS").Item("LINE1").Value 
        	Engine.Item("ADDRESS").Item("SUBURB").Value = Extras.RiskDataEngine.Item("ADDRESS").Item("SUBURB").Value 
        	Engine.Item("ADDRESS").Item("TOWN").Value = Extras.RiskDataEngine.Item("ADDRESS").Item("TOWN").Value 
        	Engine.Item("ADDRESS").Item("POSTCODE").Value = Extras.RiskDataEngine.Item("ADDRESS").Item("POSTCODE").Value
        	Engine.Item("ADDRESS").Item("REGION").Value = Extras.RiskDataEngine.Item("ADDRESS").Item("REGION").Value 
        	Engine.Item("ADDRESS").Item("COUNTRY").Value = Extras.RiskDataEngine.Item("ADDRESS").Item("COUNTRY").Value 
          	
        	'Total Sum insured
        	Engine.Item("TRADERSCLAIM").Item("SECTIONA").Value = Extras.RiskDataEngine.Item("GENERAL").Item("SECTIONA").Value 
        	Engine.Item("TRADERSCLAIM").Item("SECTIONB").Value = Extras.RiskDataEngine.Item("GENERAL").Item("SECTIONB").Value 
        	Engine.Item("TRADERSCLAIM").Item("SECTIONC").Value = Extras.RiskDataEngine.Item("GENERAL").Item("SECTIONC").Value 
        	Engine.Item("TRADERSCLAIM").Item("COVER_TYPE").Value = Extras.RiskDataEngine.Item("GENERAL").Item("COVER_TYPE").Value 
        	
        	Engine.Item("TRADERSCLAIM").Item("ANNUAL_WAGE").Value = Extras.RiskDataEngine.Item("GENERAL").Item("ANNUAL_WAGE").Value 
        	Engine.Item("TRADERSCLAIM").Item("TYPE_WAGES").Value = Extras.RiskDataEngine.Item("GENERAL").Item("TYPE_WAGES").Value 
        	
        	Engine.Item("TRADERSCLAIM").Item("IS_INTERNAL").Value = Extras.RiskDataEngine.Item("GENERAL").Item("IS_INTERNAL").Value 
        	Engine.Item("TRADERSCLAIM").Item("IS_EXTERNAL").Value = Extras.RiskDataEngine.Item("GENERAL").Item("IS_EXTERNAL").Value 
        	Engine.Item("TRADERSCLAIM").Item("EXCESS_AMT").Value = Extras.RiskDataEngine.Item("GENERAL").Item("EXCESS_AMT").Value 
        	
        	Engine.Item("SECTIONA").Item("SUMINSURED").Value = Extras.RiskDataEngine.Item("SECTIONA").Item("SUMINSURED").Value 
        	Engine.Item("SECTIONA").Item("FAP").Value = Extras.RiskDataEngine.Item("SECTIONA").Item("FAP").Value 
        	Engine.Item("SECTIONA").Item("FAP_MIN_AMOUNT").Value = Extras.RiskDataEngine.Item("SECTIONA").Item("FAP_MIN_AMOUNT").Value 
        	
        	Engine.Item("SECTIONB").Item("SUMINSURED").Value = Extras.RiskDataEngine.Item("SECTIONB").Item("SUMINSURED").Value 
        	Engine.Item("SECTIONB").Item("FAP").Value = Extras.RiskDataEngine.Item("SECTIONB").Item("FAP").Value 
        	Engine.Item("SECTIONB").Item("FAP_MIN_AMOUNT").Value = Extras.RiskDataEngine.Item("SECTIONB").Item("FAP_MIN_AMOUNT").Value 
        	
        	Engine.Item("SECTIONC").Item("MAX_PERS_C").Value = Extras.RiskDataEngine.Item("SECTIONC").Item("MAX_PERS_C").Value 
        	Engine.Item("SECTIONC").Item("MAX_EVENT_C").Value = Extras.RiskDataEngine.Item("SECTIONC").Item("MAX_EVENT_C").Value 
        	Engine.Item("SECTIONC").Item("MAX_PERS_LOI").Value = Extras.RiskDataEngine.Item("SECTIONC").Item("MAX_PERS_LOI").Value 
        	Engine.Item("SECTIONC").Item("MAX_EVENT_LOI").Value = Extras.RiskDataEngine.Item("SECTIONC").Item("MAX_EVENT_LOI").Value 
        	
        	'Section A child screen
        	iTotalCount = Extras.RiskDataEngine.Item("EXTENSIONS").Count("SEC_A")
        	For iCount = 1 To iTotalCount
        		Engine.Item("TRADERSCLAIM").NewObject("SEC_A")			
        		Engine.Item("TRADERSCLAIM").Item("SEC_A", iCount).Item("ENDORSE_CAP").Value = Extras.RiskDataEngine.Item("EXTENSIONS").Item("SEC_A", iCount).Item("ENDORSE_CAP").Value
        	Next
        
        
        	Engine.Item("EXTENSIONS").Item("DEMONSTRATION").Value = Extras.RiskDataEngine.Item("EXTENSIONS").Item("DEMONSTRATION").Value 
        	
        	Engine.Item("EXTENSIONS").Item("VEHICLE").Value = Extras.RiskDataEngine.Item("EXTENSIONS").Item("VEHICLE").Value 
        	Engine.Item("EXTENSIONS").Item("VEH_INDIMNITY").Value = Extras.RiskDataEngine.Item("EXTENSIONS").Item("VEH_INDIMNITY").Value
        	Engine.Item("EXTENSIONS").Item("VEH_DAYS").Value = Extras.RiskDataEngine.Item("EXTENSIONS").Item("VEH_DAYS").Value 
        	'Engine.Item("EXTENSIONS").Item("VEH_RATE").Value = Extras.RiskDataEngine.Item("EXTENSIONS").Item("VEH_RATE").Value
        	
        	Engine.Item("EXTENSIONS").Item("LOSS").Value = Extras.RiskDataEngine.Item("EXTENSIONS").Item("LOSS").Value
        	Engine.Item("EXTENSIONS").Item("LOSS_INDEMNITY").Value = Extras.RiskDataEngine.Item("EXTENSIONS").Item("LOSS_INDEMNITY").Value 
        	Engine.Item("EXTENSIONS").Item("LOSS_DAYS").Value = Extras.RiskDataEngine.Item("EXTENSIONS").Item("LOSS_DAYS").Value
        	'Engine.Item("EXTENSIONS").Item("LOSS_RATE").Value = Extras.RiskDataEngine.Item("EXTENSIONS").Item("LOSS_RATE").Value 
        	
        	Engine.Item("EXTENSIONS").Item("LEGAL").Value = Extras.RiskDataEngine.Item("EXTENSIONS").Item("LEGAL").Value
        	
        	Engine.Item("EXTENSIONS").Item("RIOT").Value = Extras.RiskDataEngine.Item("EXTENSIONS").Item("RIOT").Value
        	Engine.Item("EXTENSIONS").Item("RIOT_FAP").Value = Extras.RiskDataEngine.Item("EXTENSIONS").Item("RIOT_FAP").Value
        	Engine.Item("EXTENSIONS").Item("RIOT_MIN_AMT").Value = Extras.RiskDataEngine.Item("EXTENSIONS").Item("RIOT_MIN_AMT").Value
        	
        	Engine.Item("EXTENSIONS").Item("SOCIAL").Value = Extras.RiskDataEngine.Item("EXTENSIONS").Item("SOCIAL").Value
        	Engine.Item("EXTENSIONS").Item("SDP_NUMB").Value = Extras.RiskDataEngine.Item("EXTENSIONS").Item("SDP_NUMB").Value
        	Engine.Item("EXTENSIONS").Item("SDP_UNIT_COST").Value = Extras.RiskDataEngine.Item("EXTENSIONS").Item("SDP_UNIT_COST").Value
        	Engine.Item("EXTENSIONS").Item("SDP_FAP").Value = Extras.RiskDataEngine.Item("EXTENSIONS").Item("SDP_FAP").Value
        	Engine.Item("EXTENSIONS").Item("SDP_MIN_AMT").Value = Extras.RiskDataEngine.Item("EXTENSIONS").Item("SDP_MIN_AMT").Value
        	
        	Engine.Item("EXTENSIONS").Item("SPECIAL").Value = Extras.RiskDataEngine.Item("EXTENSIONS").Item("SPECIAL").Value
        	Engine.Item("EXTENSIONS").Item("SPV_FAP").Value = Extras.RiskDataEngine.Item("EXTENSIONS").Item("SPV_FAP").Value
        	Engine.Item("EXTENSIONS").Item("SPV_MIN_AMT").Value = Extras.RiskDataEngine.Item("EXTENSIONS").Item("SPV_MIN_AMT").Value
        	
        	Engine.Item("EXTENSIONS").Item("TOOL").Value = Extras.RiskDataEngine.Item("EXTENSIONS").Item("TOOL").Value
        	
        	Engine.Item("EXTENSIONS").Item("UNA_EMP").Value = Extras.RiskDataEngine.Item("EXTENSIONS").Item("UNA_EMP").Value
        	Engine.Item("EXTENSIONS").Item("UNA_FAP").Value = Extras.RiskDataEngine.Item("EXTENSIONS").Item("UNA_FAP").Value
        	Engine.Item("EXTENSIONS").Item("UNA_MIN_AMT").Value = Extras.RiskDataEngine.Item("EXTENSIONS").Item("UNA_MIN_AMT").Value
        	
        	Engine.Item("EXTENSIONS").Item("VHR").Value = Extras.RiskDataEngine.Item("EXTENSIONS").Item("VHR").Value
        	Engine.Item("EXTENSIONS").Item("VHR_NUMBER").Value = Extras.RiskDataEngine.Item("EXTENSIONS").Item("VHR_NUMBER").Value
        	
        	'EXTENSIONS child screen
        	iTotalCount = Extras.RiskDataEngine.Item("EXTENSIONS").Count("SDPMT_CHILD")
        	For iCount = 1 To iTotalCount
        		Engine.Item("EXTENSIONS").NewObject("SDPMT_CHILD")			
        		Engine.Item("EXTENSIONS").Item("SDPMT_CHILD", iCount).Item("NAME").Value = Extras.RiskDataEngine.Item("EXTENSIONS").Item("SDPMT_CHILD", iCount).Item("NAME").Value		
        	Next
        	
        	'Section A notes (printed)
        	iTotalCount = Extras.RiskDataEngine.Item("EXTENSIONS").Count("MTSNOTE_DETAILS")
        	For iCount = 1 To iTotalCount
        		Engine.Item("TRADERSCLAIM").NewObject("MTSNOTE_DETAILS")
        		Engine.Item("TRADERSCLAIM").Item("MTSNOTE_DETAILS", iCount).Item("DATE_CREATED").Value = Extras.RiskDataEngine.Item("EXTENSIONS").Item("MTSNOTE_DETAILS", iCount).Item("DATE_CREATED").Value	
        		Engine.Item("TRADERSCLAIM").Item("MTSNOTE_DETAILS", iCount).Item("CREATED_BY").Value = Extras.RiskDataEngine.Item("EXTENSIONS").Item("MTSNOTE_DETAILS", iCount).Item("CREATED_BY").Value	
        		Engine.Item("TRADERSCLAIM").Item("MTSNOTE_DETAILS", iCount).Item("COVER_TYPE").Value = Extras.RiskDataEngine.Item("EXTENSIONS").Item("MTSNOTE_DETAILS", iCount).Item("COVER_TYPE").Value	
        		Engine.Item("TRADERSCLAIM").Item("MTSNOTE_DETAILS", iCount).Item("NOTE_DESCRIPTION").Value = Extras.RiskDataEngine.Item("EXTENSIONS").Item("MTSNOTE_DETAILS", iCount).Item("NOTE_DESCRIPTION").Value		
        		Engine.Item("TRADERSCLAIM").Item("MTSNOTE_DETAILS", iCount).Item("NOTE_DETAILS").Value = Extras.RiskDataEngine.Item("EXTENSIONS").Item("MTSNOTE_DETAILS", iCount).Item("NOTE_DETAILS").Value		
        	Next
        	
        	'Section A notes (not printed)
        	iTotalCount = Extras.RiskDataEngine.Item("EXTENSIONS").Count("MTNOTE_DETAILS")
        	For iCount = 1 To iTotalCount
        		Engine.Item("TRADERSCLAIM").NewObject("MTNOTE_DETAILS")
        		Engine.Item("TRADERSCLAIM").Item("MTNOTE_DETAILS", iCount).Item("DATE_CREATED").Value = Extras.RiskDataEngine.Item("EXTENSIONS").Item("MTNOTE_DETAILS", iCount).Item("DATE_CREATED").Value
        		Engine.Item("TRADERSCLAIM").Item("MTNOTE_DETAILS", iCount).Item("CREATED_BY").Value = Extras.RiskDataEngine.Item("EXTENSIONS").Item("MTNOTE_DETAILS", iCount).Item("CREATED_BY").Value
        		Engine.Item("TRADERSCLAIM").Item("MTNOTE_DETAILS", iCount).Item("COVER_TYPE").Value = Extras.RiskDataEngine.Item("EXTENSIONS").Item("MTNOTE_DETAILS", iCount).Item("COVER_TYPE").Value
        		Engine.Item("TRADERSCLAIM").Item("MTNOTE_DETAILS", iCount).Item("NOTE_DESCRIPTION").Value = Extras.RiskDataEngine.Item("EXTENSIONS").Item("MTNOTE_DETAILS", iCount).Item("NOTE_DESCRIPTION").Value		
        		Engine.Item("TRADERSCLAIM").Item("MTNOTE_DETAILS", iCount).Item("NOTE_DETAILS").Value = Extras.RiskDataEngine.Item("EXTENSIONS").Item("MTNOTE_DETAILS", iCount).Item("NOTE_DETAILS").Value		
        	Next
        	
        End Sub

        Dim iObjectInstanceCount
        
        Sub FindObjectInstanceCount(strScreenObjectName)
        	iObjectInstanceCount = 1
        
        	' strScreenObjectName is the object that is associate with this screen (if a child), or "" if the root screen.
        	If strScreenObjectName <> ""  Then
        		Dim instanceCount
        		
        		' How many instance of this object exist?
        		instanceCount = engine.count(strScreenObjectName)
        		
        		Dim i
        		for i = 1 to instanceCount
        			if engine.item(strScreenObjectName, i).item("OI").value = vAdditionalData(cAdditionalData_OIKey) then
        				iObjectInstanceCount = i
        			end if
        		next
        	End If
        End Sub

        Sub DefaultTextTo(strSourceObject, strSourceProperty, strValue, strIgnore)
        	Engine.Item(strSourceObject, iObjectInstanceCount).Item(strSourceProperty).Value = strValue
        End Sub

        
        Sub DefaultCommentTo(strSourceObject, strSourceProperty, strValue, strIgnore)
        	Engine.Item(strSourceObject, iObjectInstanceCount).Item(strSourceProperty).Value = strValue
        End Sub

        
        Sub DefaultIntegerTo(strSourceObject, strSourceProperty, strValue, strIgnore)
        	Engine.Item(strSourceObject, iObjectInstanceCount).Item(strSourceProperty).Value = CLng(strValue)
        End Sub

        
        Sub DefaultCheckboxTo(strSourceObject, strSourceProperty, strValue, strIgnore)
        	Engine.Item(strSourceObject, iObjectInstanceCount).Item(strSourceProperty).Value = CInt(strValue)
        End Sub

        
        Sub DefaultBooleanListTo(strSourceObject, strSourceProperty, strValue, strIgnore)
        	Engine.Item(strSourceObject, iObjectInstanceCount).Item(strSourceProperty).Value = CInt(strValue)
        End Sub

        
        Sub DefaultBooleanRadioTo(strSourceObject, strSourceProperty, strValue, strIgnore)
        	Engine.Item(strSourceObject, iObjectInstanceCount).Item(strSourceProperty).Value = CInt(strValue)
        End Sub

        
        Sub DefaultListTo(strSourceObject, strSourceProperty, strValue, strListCode)
        	If InStr(1, LCase(strValue), "code:", 1) = 1 Then
        		' The default value has been specified as a code (code:<thecode>).
        		Dim code
        		Dim effectiveDate
        		Dim version
        		
        		code = Mid(strValue, Len("code:")+1)
        		effectiveDate = Now()
        		version = 1
        		
        		Dim listItemId
        		listItemId = Extras.GetField(strListCode, strListCode + "_Id", code, effectiveDate, version)
        		
        		Engine.Item(strSourceObject, iObjectInstanceCount).Item(strSourceProperty).Value = CInt(listItemId)
        	Else
        		Engine.Item(strSourceObject, iObjectInstanceCount).Item(strSourceProperty).Value = CInt(strValue)
        	End If
        End Sub

        
        Sub DefaultRateListTo(strSourceObject, strSourceProperty, strValue, strListCode)
        	' TODO.
        End Sub

        
        Sub DefaultDateTo(strSourceObject, strSourceProperty, strValue, strIgnore)
        	
        	Dim location
        	Dim Interval
        	Dim Duration
        	Dim DateValue
        	
        	'Upper case the input
        	DateValue = UCase(strValue)
        	'Check to see if we want data AND  Time
        	location = InStr(1,DateValue,"DATETIME")
        	if location > 0 then
        		DateValue=  CDate(FormatDateTime(Now,0)) 'use the standard vb datetime
        	End If
        	'Check to see if TODAY is specified as a modifier
        	location  = InStr(1,DateValue,"TODAY")
        	If location > 0 Then
        		'Determine if we are adding values
        		location  = InStr(1,DateValue,"+")
        		If location > 0 Then 
        			Interval = Mid(DateValue,location + 1,1)
        			
        			If Interval = "Y" Then
        				Interval = "YYYY"
        			End If
        			
        			If Interval <> "" Then 
        				Duration  = Mid(DateValue,location + 2,Len(DateValue) - (location+1))
        				DateValue = DateAdd(Interval,Duration,CDate(FormatDateTime(Now,2)))	
        				
        			Else
        				'No Interval specified 
        				'Need an error here!!!!
        			End If	
        		Else 
        			'Check to see if we are subtracting values
        			location  =InStr(1,DateValue,"-")
        			If location > 0  Then 
        				Interval = Mid(DateValue,location + 1,1)
        				
        				If Interval <> "" Then 
        					Duration  = Mid(DateValue,location + 2,Len(DateValue) - (location+1))
        					DateValue = DateAdd(Interval, Duration * -1,CDate(FormatDateTime(Now,2)))	
        				Else
        					'No Interval specified 
        					'Need an error here!!!!
        				End If
        			Else
        				'No Function specified, so assume we are just using today's date as a shortdate
        				DateValue = CDate(FormatDateTime(Now,2))
        			End If
        			
        		End If
        		
        	End If	
        	
        	Engine.Item(strSourceObject, iObjectInstanceCount).Item(strSourceProperty).Value = CDate(DateValue)
        End Sub

        
        Sub DefaultCurrencyTo(strSourceObject, strSourceProperty, strValue, strIgnore)
        	Engine.Item(strSourceObject, iObjectInstanceCount).Item(strSourceProperty).Value = CDbl(strValue)
        End Sub

        
        Sub DefaultPercentageTo(strSourceObject, strSourceProperty, strValue, strIgnore)
        	Engine.Item(strSourceObject, iObjectInstanceCount).Item(strSourceProperty).Value = CDbl(strValue)
        End Sub

Sub WebRequired(bIsOnStart)
	If bIsOnStart = True Then
		Engine.NewObject("GENERAL")
		Engine.NewObject("ADDRESS")
		Engine.NewObject("TRADERSCLAIM")
		Engine.NewObject("SECTIONA")
		Engine.NewObject("SECTIONB")
		Engine.NewObject("SECTIONC")
		Engine.NewObject("EXTENSIONS")
	End If
End Sub

Sub onScreenLogic(bIsOnStart)
        
         If bIsOnStart = True Or bIsOnStart = False Then
        	Call GetClaimUserLevel()
        End If
        
         
        
        
        If bIsOnStart = True Then
        	Call PullFromRiskMT()
        End If
        ' The ScreenMain rule is added to every screen automatically.
        
        
        Call FindObjectInstanceCount("")
End Sub

Sub onValidate_GENERAL__THIRDPARTY(bIsOnStart)
        If bIsOnStart = True Then
        	Call DefaultCheckboxTo("GENERAL", "THIRDPARTY", "0", "{listcode}")
        End If
End Sub

Sub onValidate_GENERAL__SALVAGE(bIsOnStart)
        If bIsOnStart = True Then
        	Call DefaultCheckboxTo("GENERAL", "SALVAGE", "0", "{listcode}")
        End If
End Sub

Sub onValidate_GENERAL__RECOVERY(bIsOnStart)
        If bIsOnStart = True Then
        	Call DefaultCheckboxTo("GENERAL", "RECOVERY", "0", "{listcode}")
        End If
End Sub

Sub onValidate_GENERAL__IS_SPM(bIsOnStart)
        If bIsOnStart = True Then
        	Call DefaultCheckboxTo("GENERAL", "IS_SPM", "0", "{listcode}")
        End If
End Sub

Sub onValidate_GENERAL__IS_THRDTLS(bIsOnStart)
        If bIsOnStart = True Then
        	Call DefaultCheckboxTo("GENERAL", "IS_THRDTLS", "0", "{listcode}")
        End If
End Sub

Sub onValidate_GENERAL__IS_NAMAPP(bIsOnStart)
        If bIsOnStart = True Then
        	Call DefaultCheckboxTo("GENERAL", "IS_NAMAPP", "0", "{listcode}")
        End If
End Sub

Sub DoDefaults(bIsOnStart)
    Call WebRequired(bIsOnStart)
    Call onScreenLogic(bIsOnStart)
    Call onValidate_GENERAL__THIRDPARTY(bIsOnStart)
    Call onValidate_GENERAL__SALVAGE(bIsOnStart)
    Call onValidate_GENERAL__RECOVERY(bIsOnStart)
    Call onValidate_GENERAL__IS_SPM(bIsOnStart)
    Call onValidate_GENERAL__IS_THRDTLS(bIsOnStart)
    Call onValidate_GENERAL__IS_NAMAPP(bIsOnStart)
End Sub

Sub Start()
    Call DoDefaults(True)
End Sub

Sub Main()
    Call DoDefaults(False)
End Sub

