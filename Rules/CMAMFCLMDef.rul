        '**********************************************************************************************
        'Load Defaults from UDLs
        '**********************************************************************************************
        Sub GetClaimUserLevel()
         Dim vResult
         Dim sSQL 
         Dim iUserName
         Dim UserAuthorityGroup
         iUserName = Extras.Username
        	
        	sSQL = "SELECT usergroup FROM UDL_CLAIM_UGA WHERE code = '" & iUserName & "'" 	
        	Call Extras.CallNamedStoredProcedure(4033, "RetrieveData", vResult, Array("sSQL", sSQL))
        		
        	If IsArray(vResult) Then
        			UserAuthorityGroup = vResult(0, 0)
        	End If
        	
        	'Assign Defaults Claim User Group Value
        	With Engine.Item("GENERAL")
        		'Extras.Username Extras.GetField("UDL_CLAIM_UGA", "usergroup", Extras.Username,Extras.CoverStartDate)
        		.Item("UserGroup").Value = UserAuthorityGroup 
        		
        		If (.Item("SALVAGESTAT").Value ="") Or IsNull(.Item("SALVAGESTAT").Value) Then
                    .Item("SALVAGESTAT").Value = 1
                End If 
        		
        		If (.Item("LEGALSTAT").Value ="") Or IsNull(.Item("LEGALSTAT").Value) Then
                    .Item("LEGALSTAT").Value = 15
                End If
        		
        		If (.Item("CLMDECISION").Value ="") Or IsNull(.Item("CLMDECISION").Value) Then
                    .Item("CLMDECISION").Value = 5
                End If
        		
        		
        	End With
        	
        End Sub

        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        Sub PullFromRisk()
        	'Instantiate Risk object(s)
        	Extras.RiskDataEngine.NewObject("GENERAL")
        	Extras.RiskDataEngine.NewObject("ADDRESS")
        	Extras.RiskDataEngine.NewObject("FLEET")
        	Extras.RiskDataEngine.NewObject("FLEET_LIABILITY")
        	Extras.RiskDataEngine.NewObject("FLEET_EXTENSIONS")
        	Extras.RiskDataEngine.NewObject("REFERRAL_CLAUSES")
        	Extras.RiskDataEngine.NewObject("NOTES")
        
        	'Instantiate Claims object(s)
        	Engine.NewObject("GENERAL")
        	Engine.NewObject("ADDRESS")
        	Engine.NewObject("FLEET")
        	Engine.NewObject("FLEET_LIABILITY")
        	Engine.NewObject("FLEET_EXTENSIONS")
        
        	'---------------------------------------------------
        	'---START: Non-child screen properties population---	
        	'---------------------------------------------------
        	Dim RiskObject, ClaimObject
        
        	RiskObject = "GENERAL"
        	ClaimObject = "GENERAL"
        
        	'---------------------------------------------'
        	Call ToClaim(RiskObject,ClaimObject,"RISKATTACHDATE")
        	Call ToClaim(RiskObject,ClaimObject,"EFFECTIVEDATE")
        	Call ToClaim(RiskObject,ClaimObject,"IS_VAT")
        	'---------------Industry---------------'
        	Call ToClaim(RiskObject,ClaimObject,"PRIMARY_INDUSTRY")
        	Call ToClaim(RiskObject,ClaimObject,"SECOND_INDUSTRY")
        	Call ToClaim(RiskObject,ClaimObject,"TERTIARY_INDUSTRY")
        	Call ToClaim(RiskObject,ClaimObject,"INDUSTRY")
        	
        	'---------------Address---------------'
        	RiskObject = "ADDRESS"
        	ClaimObject = "ADDRESS"
        	Call ToClaim(RiskObject,ClaimObject,"ADDRESSLIST")
        	Call ToClaim(RiskObject,ClaimObject,"LINE1")
        	Call ToClaim(RiskObject,ClaimObject,"SUBURB")
        	Call ToClaim(RiskObject,ClaimObject,"TOWN")
        	Call ToClaim(RiskObject,ClaimObject,"POSTCODE")
        	Call ToClaim(RiskObject,ClaimObject,"REGION")
        	Call ToClaim(RiskObject,ClaimObject,"COUNTRY")
        	
        	'---------------Fleet---------------'
        	RiskObject = "FLEET"
        	ClaimObject = "FLEET"
        	Call ToClaim(RiskObject,ClaimObject,"TYPE_OF_AGGR")
        	Call ToClaim(RiskObject,ClaimObject,"AGGR_EXCESS")
        	Call ToClaim(RiskObject,ClaimObject,"INNER_EXCESS")
        	Call ToClaim(RiskObject,ClaimObject,"STOPPER")
        	
        	Call ToClaim(RiskObject,ClaimObject,"TYPEFLEET")
        	Call ToClaim(RiskObject,ClaimObject,"COVERTYPE")
        	Call ToClaim(RiskObject,ClaimObject,"RI_LIMIT")
        	Call ToClaim(RiskObject,ClaimObject,"FLEET_SI")
        
        	Call ToClaim(RiskObject,ClaimObject,"FAP_ODMIN_PER")
        	Call ToClaim(RiskObject,ClaimObject,"FAP_ODMIN_AMT")
        	Call ToClaim(RiskObject,ClaimObject,"FAP_THMIN_PER")
        	Call ToClaim(RiskObject,ClaimObject,"FAP_THMIN_AMT")
        	
        	'---------------Liabilities---------------'
        	RiskObject = "FLEET_LIABILITY"
        	ClaimObject = "FLEET_LIABILITY"
        	Call ToClaim(RiskObject,ClaimObject,"TP_NONFARE")
        	Call ToClaim(RiskObject,ClaimObject,"TP_NONFARE_LIMIT")
        	Call ToClaim(RiskObject,ClaimObject,"TP_NONFARE_MIN_PERC")
        	Call ToClaim(RiskObject,ClaimObject,"TP_NONFARE_MIN_AMNT")
        	
        	Call ToClaim(RiskObject,ClaimObject,"TP")
        	Call ToClaim(RiskObject,ClaimObject,"TP_LIMIT")
        	Call ToClaim(RiskObject,ClaimObject,"TP_MIN_PERC")
        	Call ToClaim(RiskObject,ClaimObject,"TP_MIN_AMNT")
        	
        	Call ToClaim(RiskObject,ClaimObject,"PL_FARE")
        	Call ToClaim(RiskObject,ClaimObject,"PL_FARE_LIMIT")
        	Call ToClaim(RiskObject,ClaimObject,"PL_FARE_MIN_PERC")
        	Call ToClaim(RiskObject,ClaimObject,"PL_FARE_MIN_AMNT")
        	
        	Call ToClaim(RiskObject,ClaimObject,"UN_PL")
        	Call ToClaim(RiskObject,ClaimObject,"UN_PL_LIMIT")
        	
        	'---------------Extensions---------------'
        	RiskObject = "FLEET_EXTENSIONS"
        	ClaimObject = "FLEET_EXTENSIONS"
        	Call ToClaim(RiskObject,ClaimObject,"LOSS_KEYS")
        	Call ToClaim(RiskObject,ClaimObject,"LOSS_KEYS_LIMIT")
        	Call ToClaim(RiskObject,ClaimObject,"LOSS_KEYS_FAP_PER")
        	Call ToClaim(RiskObject,ClaimObject,"LOSS_KEYS_MIN_AMT")
        	
        	Call ToClaim(RiskObject,ClaimObject,"CAR_HIRE")
        	Call ToClaim(RiskObject,ClaimObject,"CAR_HIRE_LIMIT")
        	Call ToClaim(RiskObject,ClaimObject,"CAR_HIRE_DAYS")
        	
        	Call ToClaim(RiskObject,ClaimObject,"LOSS_USE")
        	Call ToClaim(RiskObject,ClaimObject,"LOSS_USE_LIMIT")
        	Call ToClaim(RiskObject,ClaimObject,"LOSS_USE_DAYS")
        	
        	Call ToClaim(RiskObject,ClaimObject,"WRECKAGE")
        	Call ToClaim(RiskObject,ClaimObject,"WRECKAGE_LIMIT")
        
        	Call ToClaim(RiskObject,ClaimObject,"EXT_TERITORY")
        	Call ToClaim(RiskObject,ClaimObject,"EXT_TERITORY_FAP_PER")
        	Call ToClaim(RiskObject,ClaimObject,"EXT_TERITORY_MIN_AMT")
        	Call ToClaim(RiskObject,ClaimObject,"EXT_TERITORY_DESC")
        
        	Call ToClaim(RiskObject,ClaimObject,"RIOT")
        	
        	Call ToClaim(RiskObject,ClaimObject,"EXCESS")
        
        	Call ToClaim(RiskObject,ClaimObject,"WINDSCREEN")
        	Call ToClaim(RiskObject,ClaimObject,"WINDSCREEN_FAP_PER")
        	Call ToClaim(RiskObject,ClaimObject,"WINDSCREEN_MIN_AMT")
        	
        	Call ToClaim(RiskObject,ClaimObject,"ROAD_ASSIST")
        	
        	Call ToClaim(RiskObject,ClaimObject,"IS_NASRIA")
        	Call ToClaim(RiskObject,ClaimObject,"NASRIA_LIMIT")
        	Call ToClaim(RiskObject,ClaimObject,"NASRIA_CATEGORY")
        
        	'---------------Interest Parties---------------'
        	Dim ClaimChild, Cnt, nIndex
        	RiskObject = "INT_PARTIES"
        	ClaimObject = "FLEET"
        	ClaimChild = "INT_PARTIES"
        	Cnt = Extras.RiskDataEngine.Count(RiskObject)
        
        	For nIndex = 1 to Cnt
        		Engine.Item(ClaimObject).NewObject(ClaimChild)
        		Call ToChildClaim(RiskObject,ClaimObject,ClaimChild,nIndex,"NAME")
        		Call ToChildClaim(RiskObject,ClaimObject,ClaimChild,nIndex,"STARTDATE")
        		Call ToChildClaim(RiskObject,ClaimObject,ClaimChild,nIndex,"REGNO")
        	Next
        
        	'---------------Vehicle Details---------------'
        	RiskObject = "VEHICLE_DETAILS"
        	ClaimObject = "FLEET"
        	ClaimChild = "VEHICLE_DETAILS"
        	Cnt = Extras.RiskDataEngine.Count(RiskObject)
        
        	For nIndex = 1 to Cnt
        		Engine.Item(ClaimObject).NewObject(ClaimChild)
        		Call ToChildClaim(RiskObject,ClaimObject,ClaimChild,nIndex,"MAKEMODEL")
        		Call ToChildClaim(RiskObject,ClaimObject,ClaimChild,nIndex,"CYEAR")
        		Call ToChildClaim(RiskObject,ClaimObject,ClaimChild,nIndex,"REGNO")
        		Call ToChildClaim(RiskObject,ClaimObject,ClaimChild,nIndex,"SUMINSURED")
        	Next
        	
        	'---------------Fleet Cover Details---------------'
        	RiskObject = "FLEET_DETAILS"
        	ClaimObject = "FLEET"
        	ClaimChild = "FLEET_DETAILS"
        	Cnt = Extras.RiskDataEngine.Count(RiskObject)
        
        	For nIndex = 1 to Cnt
        		Engine.Item(ClaimObject).NewObject(ClaimChild)
        		Call ToChildClaim(RiskObject,ClaimObject,ClaimChild,nIndex,"MIN_LIMIT")
        		Call ToChildClaim(RiskObject,ClaimObject,ClaimChild,nIndex,"MAX_LIMIT")
        		Call ToChildClaim(RiskObject,ClaimObject,ClaimChild,nIndex,"NO_UNITS")
        	Next
        
        	'---------------Sound Equipment---------------'
        	RiskObject = "SOUND_EQUIPMENT"
        	ClaimObject = "FLEET"
        	ClaimChild = "SOUND_EQUIPMENT"
        	Cnt = Extras.RiskDataEngine.Count(RiskObject)
        
        	For nIndex = 1 to Cnt
        		Engine.Item(ClaimObject).NewObject(ClaimChild)
        		Call ToChildClaim(RiskObject,ClaimObject,ClaimChild,nIndex,"DESCRIPTION")
        		Call ToChildClaim(RiskObject,ClaimObject,ClaimChild,nIndex,"REG_NUM")
        		Call ToChildClaim(RiskObject,ClaimObject,ClaimChild,nIndex,"LIMIT")
        		Call ToChildClaim(RiskObject,ClaimObject,ClaimChild,nIndex,"FAP_PER")
        		Call ToChildClaim(RiskObject,ClaimObject,ClaimChild,nIndex,"FAP_AMT")
        	Next
        	
        	'---------------Endorsement---------------'
        	RiskObject = "CLAUSEPREM"
        	ClaimObject = "FLEET"
        	ClaimChild = "CLAUSEPREM"
        	Cnt = Extras.RiskDataEngine.Count(RiskObject)
        
        	For nIndex = 1 to Cnt
        		Engine.Item(ClaimObject).NewObject(ClaimChild)
        		Call ToChildClaim(RiskObject,ClaimObject,ClaimChild,nIndex,"ENDORSE_CAP")
        	Next
        
        	'---------------Notes - Not Printed---------------'
        	RiskObject = "CNOTE_DETAILS"
        	ClaimChild = "CNOTE_DETAIL"
        	Cnt = Extras.RiskDataEngine.Count(RiskObject)
        
        	For nIndex = 1 to Cnt
        		Engine.Item(ClaimObject).NewObject(ClaimChild)
        		Call ToChildClaim(RiskObject,ClaimObject,ClaimChild,nIndex,"DATE_CREATED")
        		Call ToChildClaim(RiskObject,ClaimObject,ClaimChild,nIndex,"CREATED_BY")
        		Call ToChildClaim(RiskObject,ClaimObject,ClaimChild,nIndex,"COVER_TYPE")
        		Call ToChildClaim(RiskObject,ClaimObject,ClaimChild,nIndex,"NOTE_DESCRIPTION")
        		Call ToChildClaim(RiskObject,ClaimObject,ClaimChild,nIndex,"NOTE_DETAILS")
        	Next
        
        	'---------------Notes - Printed---------------'
        	RiskObject = "SCNOTE_DETAILS"
        	ClaimChild = "SCNOTE_DETAILS"
        	Cnt = Extras.RiskDataEngine.Count(RiskObject)
        
        	For nIndex = 1 to Cnt
        		Engine.Item(ClaimObject).NewObject(ClaimChild)
        		Call ToChildClaim(RiskObject,ClaimObject,ClaimChild,nIndex,"DATE_CREATED")
        		Call ToChildClaim(RiskObject,ClaimObject,ClaimChild,nIndex,"CREATED_BY")
        		Call ToChildClaim(RiskObject,ClaimObject,ClaimChild,nIndex,"COVER_TYPE")
        		Call ToChildClaim(RiskObject,ClaimObject,ClaimChild,nIndex,"NOTE_DESCRIPTION")
        		Call ToChildClaim(RiskObject,ClaimObject,ClaimChild,nIndex,"NOTE_DETAILS")
        	Next
        
        End Sub

        
        Function ToClaim(RObject, CObject, PropName)
        	Dim Val	
        	Val = Extras.RiskDataEngine.Item(RObject).Item(PropName).Value
        	Engine.Item(CObject).Item(PropName).Value = Val
        End Function
        
        Function ToClaimDiff(RObject, CObject, PropNameRisk, PropNameClaim)
        	Dim Val	
        	Val = Extras.RiskDataEngine.Item(RObject).Item(PropNameRisk).Value
        	Engine.Item(CObject).Item(PropNameClaim).Value = Val
        End Function
        
        Function ToChildClaim(RChild, CParent, Cobject, Index, PropName)
        	Dim Val
        	Val = Extras.RiskDataEngine.Item(RChild,Index).Item(PropName).Value
        	Engine.Item(CParent).Item(CObject, Index).Item(PropName).Value = Val
        End Function
        
        Function ToGrandChildClaim(RChild, RGChild, CParent, CChild, Cobject, Index, ChildIndex, PropName)
        	Dim Val
        	Val = Extras.RiskDataEngine.Item(RChild,Index).Item(RGChild,ChildIndex).Item(PropName).Value
        	Engine.Item(CParent).Item(CChild, Index).Item(CObject, ChildIndex).Item(PropName).Value = Val
        End Function
        Dim iObjectInstanceCount
        
        Sub FindObjectInstanceCount(strScreenObjectName)
        	iObjectInstanceCount = 1
        
        	' strScreenObjectName is the object that is associate with this screen (if a child), or "" if the root screen.
        	If strScreenObjectName <> ""  Then
        		Dim instanceCount
        		
        		' How many instance of this object exist?
        		instanceCount = engine.count(strScreenObjectName)
        		
        		Dim i
        		for i = 1 to instanceCount
        			if engine.item(strScreenObjectName, i).item("OI").value = vAdditionalData(cAdditionalData_OIKey) then
        				iObjectInstanceCount = i
        			end if
        		next
        	End If
        End Sub

        Sub DefaultTextTo(strSourceObject, strSourceProperty, strValue, strIgnore)
        	Engine.Item(strSourceObject, iObjectInstanceCount).Item(strSourceProperty).Value = strValue
        End Sub

        
        Sub DefaultCommentTo(strSourceObject, strSourceProperty, strValue, strIgnore)
        	Engine.Item(strSourceObject, iObjectInstanceCount).Item(strSourceProperty).Value = strValue
        End Sub

        
        Sub DefaultIntegerTo(strSourceObject, strSourceProperty, strValue, strIgnore)
        	Engine.Item(strSourceObject, iObjectInstanceCount).Item(strSourceProperty).Value = CLng(strValue)
        End Sub

        
        Sub DefaultCheckboxTo(strSourceObject, strSourceProperty, strValue, strIgnore)
        	Engine.Item(strSourceObject, iObjectInstanceCount).Item(strSourceProperty).Value = CInt(strValue)
        End Sub

        
        Sub DefaultBooleanListTo(strSourceObject, strSourceProperty, strValue, strIgnore)
        	Engine.Item(strSourceObject, iObjectInstanceCount).Item(strSourceProperty).Value = CInt(strValue)
        End Sub

        
        Sub DefaultBooleanRadioTo(strSourceObject, strSourceProperty, strValue, strIgnore)
        	Engine.Item(strSourceObject, iObjectInstanceCount).Item(strSourceProperty).Value = CInt(strValue)
        End Sub

        
        Sub DefaultListTo(strSourceObject, strSourceProperty, strValue, strListCode)
        	If InStr(1, LCase(strValue), "code:", 1) = 1 Then
        		' The default value has been specified as a code (code:<thecode>).
        		Dim code
        		Dim effectiveDate
        		Dim version
        		
        		code = Mid(strValue, Len("code:")+1)
        		effectiveDate = Now()
        		version = 1
        		
        		Dim listItemId
        		listItemId = Extras.GetField(strListCode, strListCode + "_Id", code, effectiveDate, version)
        		
        		Engine.Item(strSourceObject, iObjectInstanceCount).Item(strSourceProperty).Value = CInt(listItemId)
        	Else
        		Engine.Item(strSourceObject, iObjectInstanceCount).Item(strSourceProperty).Value = CInt(strValue)
        	End If
        End Sub

        
        Sub DefaultRateListTo(strSourceObject, strSourceProperty, strValue, strListCode)
        	' TODO.
        End Sub

        
        Sub DefaultDateTo(strSourceObject, strSourceProperty, strValue, strIgnore)
        	
        	Dim location
        	Dim Interval
        	Dim Duration
        	Dim DateValue
        	
        	'Upper case the input
        	DateValue = UCase(strValue)
        	'Check to see if we want data AND  Time
        	location = InStr(1,DateValue,"DATETIME")
        	if location > 0 then
        		DateValue=  CDate(FormatDateTime(Now,0)) 'use the standard vb datetime
        	End If
        	'Check to see if TODAY is specified as a modifier
        	location  = InStr(1,DateValue,"TODAY")
        	If location > 0 Then
        		'Determine if we are adding values
        		location  = InStr(1,DateValue,"+")
        		If location > 0 Then 
        			Interval = Mid(DateValue,location + 1,1)
        			
        			If Interval = "Y" Then
        				Interval = "YYYY"
        			End If
        			
        			If Interval <> "" Then 
        				Duration  = Mid(DateValue,location + 2,Len(DateValue) - (location+1))
        				DateValue = DateAdd(Interval,Duration,CDate(FormatDateTime(Now,2)))	
        				
        			Else
        				'No Interval specified 
        				'Need an error here!!!!
        			End If	
        		Else 
        			'Check to see if we are subtracting values
        			location  =InStr(1,DateValue,"-")
        			If location > 0  Then 
        				Interval = Mid(DateValue,location + 1,1)
        				
        				If Interval <> "" Then 
        					Duration  = Mid(DateValue,location + 2,Len(DateValue) - (location+1))
        					DateValue = DateAdd(Interval, Duration * -1,CDate(FormatDateTime(Now,2)))	
        				Else
        					'No Interval specified 
        					'Need an error here!!!!
        				End If
        			Else
        				'No Function specified, so assume we are just using today's date as a shortdate
        				DateValue = CDate(FormatDateTime(Now,2))
        			End If
        			
        		End If
        		
        	End If	
        	
        	Engine.Item(strSourceObject, iObjectInstanceCount).Item(strSourceProperty).Value = CDate(DateValue)
        End Sub

        
        Sub DefaultCurrencyTo(strSourceObject, strSourceProperty, strValue, strIgnore)
        	Engine.Item(strSourceObject, iObjectInstanceCount).Item(strSourceProperty).Value = CDbl(strValue)
        End Sub

        
        Sub DefaultPercentageTo(strSourceObject, strSourceProperty, strValue, strIgnore)
        	Engine.Item(strSourceObject, iObjectInstanceCount).Item(strSourceProperty).Value = CDbl(strValue)
        End Sub

Sub WebRequired(bIsOnStart)
	If bIsOnStart = True Then
		Engine.NewObject("GENERAL")
		Engine.NewObject("CMAMFCLAIM")
		Engine.NewObject("ADDRESS")
		Engine.NewObject("FLEET")
		Engine.NewObject("FLEET_LIABILITY")
		Engine.NewObject("FLEET_EXTENSIONS")
	End If
End Sub

Sub onScreenLogic(bIsOnStart)
        
         If bIsOnStart = True Or bIsOnStart = False Then
        	Call GetClaimUserLevel()
        End If
        
         
        
        
        	If bIsOnStart = True Then
        		Call PullFromRisk()
        		
        		Call DoInstanceCount
        	End If
        End Sub

        
        Sub DoInstanceCount
        ' The ScreenMain rule is added to every screen automatically.
        
        
        Call FindObjectInstanceCount("")
End Sub

Sub onValidate_CMAMFCLAIM__THIRDPARTY(bIsOnStart)
        If bIsOnStart = True Then
        	Call DefaultCheckboxTo("CMAMFCLAIM", "THIRDPARTY", "0", "{listcode}")
        End If
End Sub

Sub onValidate_CMAMFCLAIM__SALVAGE(bIsOnStart)
        If bIsOnStart = True Then
        	Call DefaultCheckboxTo("CMAMFCLAIM", "SALVAGE", "0", "{listcode}")
        End If
End Sub

Sub onValidate_CMAMFCLAIM__RECOVERY(bIsOnStart)
        If bIsOnStart = True Then
        	Call DefaultCheckboxTo("CMAMFCLAIM", "RECOVERY", "0", "{listcode}")
        End If
End Sub

Sub onValidate_CMAMFCLAIM__IS_THRDTLS(bIsOnStart)
        If bIsOnStart = True Then
        	Call DefaultCheckboxTo("CMAMFCLAIM", "IS_THRDTLS", "0", "{listcode}")
        End If
End Sub

Sub onValidate_CMAMFCLAIM__IS_NAMAPP(bIsOnStart)
        If bIsOnStart = True Then
        	Call DefaultCheckboxTo("CMAMFCLAIM", "IS_NAMAPP", "0", "{listcode}")
        End If
End Sub

Sub DoDefaults(bIsOnStart)
    Call WebRequired(bIsOnStart)
    Call onScreenLogic(bIsOnStart)
    Call onValidate_CMAMFCLAIM__THIRDPARTY(bIsOnStart)
    Call onValidate_CMAMFCLAIM__SALVAGE(bIsOnStart)
    Call onValidate_CMAMFCLAIM__RECOVERY(bIsOnStart)
    Call onValidate_CMAMFCLAIM__IS_THRDTLS(bIsOnStart)
    Call onValidate_CMAMFCLAIM__IS_NAMAPP(bIsOnStart)
End Sub

Sub Start()
    Call DoDefaults(True)
End Sub

Sub Main()
    Call DoDefaults(False)
End Sub

