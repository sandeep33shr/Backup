        Sub SetUserDetails()
            Dim vUserResult 
        	Dim lUserId
            Call Extras.CallNamedStoredProcedure(CLng(6722), CStr("GetUserDetails"), vUserResult,Array("sUserName", Extras.Username))
            If IsArray(vUserResult) Then
                Engine.Item("GENERAL").Item("LoggedInUser").Value = Extras.Username
        		lUserId = vUserResult(0,0)
        		Engine.Item("GENERAL").Item("LoggedInUserFullName").Value = vUserResult(1,0)
        		Engine.Item("GENERAL").Item("LoggedInUserEmail").Value = vUserResult(2,0)
            End If
        
            'Get user authority level
            Dim vExtraParameters
            Dim sRiskCode
            Dim vResults
        	Dim sProdCode
            sProdCode = Extras.ProductCode
        	
            vExtraParameters = array( "lUserId", lUserId, "sProdCode", sProdCode)
            Call Extras.CallNamedStoredProcedure(CLng(6722), "GetUserAuthorityLevel", vResults, vExtraParameters)
        	If IsArray(vResults) then
        		If vResults(0,0) <> "" Then
        			Engine.Item("GENERAL").Item("UserLevel").Value = Replace(vResults(0,0), "U","")
        			Engine.Item("GENERAL").Item("UserGroup").Value = vResults(0,0)
        		Else
        			'Assign Default Level to 1
        			Engine.Item("GENERAL").Item("UserLevel").Value = 1
        			Engine.Item("GENERAL").Item("UserGroup").Value = "U1"
        		End If
        	End IF
        End Sub

        '**********************************************************************************************
        'Load Defaults from UDLs
        '**********************************************************************************************
        Sub LoadDefaults()
         
          'Motor Specified Defaults
          With Engine.Item("GENERAL")
        	.Item("LB_NF_LOI").Value = Extras.GetField("UDL_CMAMS_DEFAULTS", "Default_Value", "LB_NF_LOI",Extras.CoverStartDate)
        	.Item("LB_TP_LOI").Value = Extras.GetField("UDL_CMAMS_DEFAULTS", "Default_Value", "LB_TP_LOI",Extras.CoverStartDate)
        	.Item("EXT_WS_FAP").Value = Extras.GetField("UDL_CMAMS_DEFAULTS", "Default_Value", "EXT_WS_FAP",Extras.CoverStartDate)
        	.Item("EXT_LK_LOI").Value = Extras.GetField("UDL_CMAMS_DEFAULTS", "Default_Value", "EXT_LK_LOI",Extras.CoverStartDate)
        	.Item("EXT_LK_FAP").Value = Extras.GetField("UDL_CMAMS_DEFAULTS", "Default_Value", "EXT_LK_FAP",Extras.CoverStartDate) 
        	.Item("EXT_LK_MIN").Value = Extras.GetField("UDL_CMAMS_DEFAULTS", "Default_Value", "EXT_LK_MIN",Extras.CoverStartDate)
        	.Item("EXT_WR_LOI").Value = Extras.GetField("UDL_CMAMS_DEFAULTS", "Default_Value", "EXT_WR_LOI",Extras.CoverStartDate)
        	.Item("SE_MIN").Value = Extras.GetField("UDL_CMAMS_DEFAULTS", "Default_Value", "SE_MIN",Extras.CoverStartDate)
        	End With
        End Sub

        
        
        
        
        Dim iObjectInstanceCount
        
        Sub FindObjectInstanceCount(strScreenObjectName)
        	iObjectInstanceCount = 1
        
        	' strScreenObjectName is the object that is associate with this screen (if a child), or "" if the root screen.
        	If strScreenObjectName <> ""  Then
        		Dim instanceCount
        		
        		' How many instance of this object exist?
        		instanceCount = engine.count(strScreenObjectName)
        		
        		Dim i
        		for i = 1 to instanceCount
        			if engine.item(strScreenObjectName, i).item("OI").value = vAdditionalData(cAdditionalData_OIKey) then
        				iObjectInstanceCount = i
        			end if
        		next
        	End If
        End Sub

        Sub DefaultTextTo(strSourceObject, strSourceProperty, strValue, strIgnore)
        	Engine.Item(strSourceObject, iObjectInstanceCount).Item(strSourceProperty).Value = strValue
        End Sub

        
        Sub DefaultCommentTo(strSourceObject, strSourceProperty, strValue, strIgnore)
        	Engine.Item(strSourceObject, iObjectInstanceCount).Item(strSourceProperty).Value = strValue
        End Sub

        
        Sub DefaultIntegerTo(strSourceObject, strSourceProperty, strValue, strIgnore)
        	Engine.Item(strSourceObject, iObjectInstanceCount).Item(strSourceProperty).Value = CLng(strValue)
        End Sub

        
        Sub DefaultCheckboxTo(strSourceObject, strSourceProperty, strValue, strIgnore)
        	Engine.Item(strSourceObject, iObjectInstanceCount).Item(strSourceProperty).Value = CInt(strValue)
        End Sub

        
        Sub DefaultBooleanListTo(strSourceObject, strSourceProperty, strValue, strIgnore)
        	Engine.Item(strSourceObject, iObjectInstanceCount).Item(strSourceProperty).Value = CInt(strValue)
        End Sub

        
        Sub DefaultBooleanRadioTo(strSourceObject, strSourceProperty, strValue, strIgnore)
        	Engine.Item(strSourceObject, iObjectInstanceCount).Item(strSourceProperty).Value = CInt(strValue)
        End Sub

        
        Sub DefaultListTo(strSourceObject, strSourceProperty, strValue, strListCode)
        	If InStr(1, LCase(strValue), "code:", 1) = 1 Then
        		' The default value has been specified as a code (code:<thecode>).
        		Dim code
        		Dim effectiveDate
        		Dim version
        		
        		code = Mid(strValue, Len("code:")+1)
        		effectiveDate = Now()
        		version = 1
        		
        		Dim listItemId
        		listItemId = Extras.GetField(strListCode, strListCode + "_Id", code, effectiveDate, version)
        		
        		Engine.Item(strSourceObject, iObjectInstanceCount).Item(strSourceProperty).Value = CInt(listItemId)
        	Else
        		Engine.Item(strSourceObject, iObjectInstanceCount).Item(strSourceProperty).Value = CInt(strValue)
        	End If
        End Sub

        
        Sub DefaultRateListTo(strSourceObject, strSourceProperty, strValue, strListCode)
        	' TODO.
        End Sub

        
        Sub DefaultDateTo(strSourceObject, strSourceProperty, strValue, strIgnore)
        	
        	Dim location
        	Dim Interval
        	Dim Duration
        	Dim DateValue
        	
        	'Upper case the input
        	DateValue = UCase(strValue)
        	'Check to see if we want data AND  Time
        	location = InStr(1,DateValue,"DATETIME")
        	if location > 0 then
        		DateValue=  CDate(FormatDateTime(Now,0)) 'use the standard vb datetime
        	End If
        	'Check to see if TODAY is specified as a modifier
        	location  = InStr(1,DateValue,"TODAY")
        	If location > 0 Then
        		'Determine if we are adding values
        		location  = InStr(1,DateValue,"+")
        		If location > 0 Then 
        			Interval = Mid(DateValue,location + 1,1)
        			
        			If Interval = "Y" Then
        				Interval = "YYYY"
        			End If
        			
        			If Interval <> "" Then 
        				Duration  = Mid(DateValue,location + 2,Len(DateValue) - (location+1))
        				DateValue = DateAdd(Interval,Duration,CDate(FormatDateTime(Now,2)))	
        				
        			Else
        				'No Interval specified 
        				'Need an error here!!!!
        			End If	
        		Else 
        			'Check to see if we are subtracting values
        			location  =InStr(1,DateValue,"-")
        			If location > 0  Then 
        				Interval = Mid(DateValue,location + 1,1)
        				
        				If Interval <> "" Then 
        					Duration  = Mid(DateValue,location + 2,Len(DateValue) - (location+1))
        					DateValue = DateAdd(Interval, Duration * -1,CDate(FormatDateTime(Now,2)))	
        				Else
        					'No Interval specified 
        					'Need an error here!!!!
        				End If
        			Else
        				'No Function specified, so assume we are just using today's date as a shortdate
        				DateValue = CDate(FormatDateTime(Now,2))
        			End If
        			
        		End If
        		
        	End If	
        	
        	Engine.Item(strSourceObject, iObjectInstanceCount).Item(strSourceProperty).Value = CDate(DateValue)
        End Sub

        
        Sub DefaultCurrencyTo(strSourceObject, strSourceProperty, strValue, strIgnore)
        	Engine.Item(strSourceObject, iObjectInstanceCount).Item(strSourceProperty).Value = CDbl(strValue)
        End Sub

        
        Sub DefaultPercentageTo(strSourceObject, strSourceProperty, strValue, strIgnore)
        	Engine.Item(strSourceObject, iObjectInstanceCount).Item(strSourceProperty).Value = CDbl(strValue)
        End Sub

Sub WebRequired(bIsOnStart)
	If bIsOnStart = True Then
		Engine.NewObject("GENERAL")
		Engine.NewObject("ADDRESS")
		Engine.NewObject("RISK_DETAILS")
		Engine.NewObject("CLAIMS_HISTORY")
		Engine.NewObject("EXTENSIONS")
		Engine.NewObject("INT_PARTY")
		Engine.NewObject("FAP")
		Engine.NewObject("LIABILITY")
		Engine.NewObject("MS_CLAUSES")
		Engine.NewObject("NOTES")
		Engine.NewObject("REFERRALS")
		Engine.NewObject("PREMIUM_OVERVIEW")
	End If
End Sub

Sub onScreenLogic(bIsOnStart)
        
        If bIsOnStart = True Or bIsOnStart = False Then
        	Call SetUserDetails()
        End If
        
        If bIsOnStart = True Then
        	Call LoadDefaults()
        End If
        ' The ScreenMain rule is added to every screen automatically.
        
        
        Call FindObjectInstanceCount("")
End Sub

Sub onValidate_GENERAL__IS_VAT(bIsOnStart)
        If bIsOnStart = True Then
        	Call DefaultListTo("GENERAL", "IS_VAT", "1", "UDL_CMA_VAT")
        End If
End Sub

Sub onValidate_GENERAL__IS_MTA_REASON(bIsOnStart)
        If bIsOnStart = True Then
        	Call DefaultCheckboxTo("GENERAL", "IS_MTA_REASON", "0", "{listcode}")
        End If
End Sub

Sub onValidate_GENERAL__NEXUSQS(bIsOnStart)
        If bIsOnStart = True Then
        	Call DefaultIntegerTo("GENERAL", "NEXUSQS", "0", "{listcode}")
        End If
End Sub

Sub onValidate_RISK_DETAILS__BASIS_SETTLE(bIsOnStart)
        If bIsOnStart = True Then
        	Call DefaultListTo("RISK_DETAILS", "BASIS_SETTLE", "1", "UDL_CMA_BASIS_SETTLEMENT")
        End If
End Sub

Sub onValidate_RISK_DETAILS__COVER_TYPE(bIsOnStart)
        If bIsOnStart = True Then
        	Call DefaultListTo("RISK_DETAILS", "COVER_TYPE", "1", "UDL_CMA_COVER_TYPE")
        End If
End Sub

Sub onValidate_RISK_DETAILS__VEH_FLATPREM(bIsOnStart)
        If bIsOnStart = True Then
        	Call DefaultCheckboxTo("RISK_DETAILS", "VEH_FLATPREM", "1", "{listcode}")
        End If
End Sub

Sub onValidate_LIABILITY__TP_CHECK(bIsOnStart)
        If bIsOnStart = True Then
        	Call DefaultCheckboxTo("LIABILITY", "TP_CHECK", "0", "{listcode}")
        End If
End Sub

Sub onValidate_LIABILITY__TPL_CHECK(bIsOnStart)
        If bIsOnStart = True Then
        	Call DefaultCheckboxTo("LIABILITY", "TPL_CHECK", "0", "{listcode}")
        End If
End Sub

Sub onValidate_LIABILITY__PL_CHECK(bIsOnStart)
        If bIsOnStart = True Then
        	Call DefaultCheckboxTo("LIABILITY", "PL_CHECK", "0", "{listcode}")
        End If
End Sub

Sub onValidate_LIABILITY__UPL_PL(bIsOnStart)
        If bIsOnStart = True Then
        	Call DefaultCheckboxTo("LIABILITY", "UPL_PL", "0", "{listcode}")
        End If
End Sub

Sub onValidate_EXTENSIONS__IS_WSCREEN(bIsOnStart)
        If bIsOnStart = True Then
        	Call DefaultCheckboxTo("EXTENSIONS", "IS_WSCREEN", "0", "{listcode}")
        End If
End Sub

Sub onValidate_EXTENSIONS__IS_LOSS_KEYS(bIsOnStart)
        If bIsOnStart = True Then
        	Call DefaultCheckboxTo("EXTENSIONS", "IS_LOSS_KEYS", "0", "{listcode}")
        End If
End Sub

Sub onValidate_EXTENSIONS__IS_RIOT(bIsOnStart)
        If bIsOnStart = True Then
        	Call DefaultCheckboxTo("EXTENSIONS", "IS_RIOT", "0", "{listcode}")
        End If
End Sub

Sub onValidate_EXTENSIONS__IS_WRECK(bIsOnStart)
        If bIsOnStart = True Then
        	Call DefaultCheckboxTo("EXTENSIONS", "IS_WRECK", "0", "{listcode}")
        End If
End Sub

Sub onValidate_EXTENSIONS__IS_EXCESS(bIsOnStart)
        If bIsOnStart = True Then
        	Call DefaultCheckboxTo("EXTENSIONS", "IS_EXCESS", "0", "{listcode}")
        End If
End Sub

Sub onValidate_EXTENSIONS__IS_EXT_TERRITORY(bIsOnStart)
        If bIsOnStart = True Then
        	Call DefaultCheckboxTo("EXTENSIONS", "IS_EXT_TERRITORY", "0", "{listcode}")
        End If
End Sub

Sub onValidate_EXTENSIONS__IS_CAR_HIRE(bIsOnStart)
        If bIsOnStart = True Then
        	Call DefaultCheckboxTo("EXTENSIONS", "IS_CAR_HIRE", "0", "{listcode}")
        End If
End Sub

Sub onValidate_EXTENSIONS__IS_LOSS_USE(bIsOnStart)
        If bIsOnStart = True Then
        	Call DefaultCheckboxTo("EXTENSIONS", "IS_LOSS_USE", "0", "{listcode}")
        End If
End Sub

Sub onValidate_EXTENSIONS__IS_ROAD(bIsOnStart)
        If bIsOnStart = True Then
        	Call DefaultCheckboxTo("EXTENSIONS", "IS_ROAD", "0", "{listcode}")
        End If
End Sub

Sub onValidate_EXTENSIONS__IS_DEPPRO(bIsOnStart)
        If bIsOnStart = True Then
        	Call DefaultCheckboxTo("EXTENSIONS", "IS_DEPPRO", "0", "{listcode}")
        End If
End Sub

Sub onValidate_EXTENSIONS__IS_GHOVEH(bIsOnStart)
        If bIsOnStart = True Then
        	Call DefaultCheckboxTo("EXTENSIONS", "IS_GHOVEH", "0", "{listcode}")
        End If
End Sub

Sub onValidate_EXTENSIONS__IS_NASRIA(bIsOnStart)
        If bIsOnStart = True Then
        	Call DefaultCheckboxTo("EXTENSIONS", "IS_NASRIA", "0", "{listcode}")
        End If
End Sub

Sub onValidate_REFERRALS__RefCount(bIsOnStart)
        If bIsOnStart = True Then
        	Call DefaultIntegerTo("REFERRALS", "RefCount", "0", "{listcode}")
        End If
End Sub

Sub onValidate_PREMIUM_OVERVIEW__BASE_PREM(bIsOnStart)
        If bIsOnStart = True Then
        	Call DefaultCurrencyTo("PREMIUM_OVERVIEW", "BASE_PREM", "0", "{listcode}")
        End If
End Sub

Sub DoDefaults(bIsOnStart)
    Call WebRequired(bIsOnStart)
    Call onScreenLogic(bIsOnStart)
    Call onValidate_GENERAL__IS_VAT(bIsOnStart)
    Call onValidate_GENERAL__IS_MTA_REASON(bIsOnStart)
    Call onValidate_GENERAL__NEXUSQS(bIsOnStart)
    Call onValidate_RISK_DETAILS__BASIS_SETTLE(bIsOnStart)
    Call onValidate_RISK_DETAILS__COVER_TYPE(bIsOnStart)
    Call onValidate_RISK_DETAILS__VEH_FLATPREM(bIsOnStart)
    Call onValidate_LIABILITY__TP_CHECK(bIsOnStart)
    Call onValidate_LIABILITY__TPL_CHECK(bIsOnStart)
    Call onValidate_LIABILITY__PL_CHECK(bIsOnStart)
    Call onValidate_LIABILITY__UPL_PL(bIsOnStart)
    Call onValidate_EXTENSIONS__IS_WSCREEN(bIsOnStart)
    Call onValidate_EXTENSIONS__IS_LOSS_KEYS(bIsOnStart)
    Call onValidate_EXTENSIONS__IS_RIOT(bIsOnStart)
    Call onValidate_EXTENSIONS__IS_WRECK(bIsOnStart)
    Call onValidate_EXTENSIONS__IS_EXCESS(bIsOnStart)
    Call onValidate_EXTENSIONS__IS_EXT_TERRITORY(bIsOnStart)
    Call onValidate_EXTENSIONS__IS_CAR_HIRE(bIsOnStart)
    Call onValidate_EXTENSIONS__IS_LOSS_USE(bIsOnStart)
    Call onValidate_EXTENSIONS__IS_ROAD(bIsOnStart)
    Call onValidate_EXTENSIONS__IS_DEPPRO(bIsOnStart)
    Call onValidate_EXTENSIONS__IS_GHOVEH(bIsOnStart)
    Call onValidate_EXTENSIONS__IS_NASRIA(bIsOnStart)
    Call onValidate_REFERRALS__RefCount(bIsOnStart)
    Call onValidate_PREMIUM_OVERVIEW__BASE_PREM(bIsOnStart)
End Sub

Sub Start()
    Call DoDefaults(True)
End Sub

Sub Main()
    Call DoDefaults(False)
End Sub

