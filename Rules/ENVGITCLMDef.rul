        Dim iObjectInstanceCount
        
        Sub FindObjectInstanceCount(strScreenObjectName)
        	iObjectInstanceCount = 1
        
        	' strScreenObjectName is the object that is associate with this screen (if a child), or "" if the root screen.
        	If strScreenObjectName <> ""  Then
        		Dim instanceCount
        		
        		' How many instance of this object exist?
        		instanceCount = engine.count(strScreenObjectName)
        		
        		Dim i
        		for i = 1 to instanceCount
        			if engine.item(strScreenObjectName, i).item("OI").value = vAdditionalData(cAdditionalData_OIKey) then
        				iObjectInstanceCount = i
        			end if
        		next
        	End If
        End Sub

        Sub DefaultTextTo(strSourceObject, strSourceProperty, strValue, strIgnore)
        	Engine.Item(strSourceObject, iObjectInstanceCount).Item(strSourceProperty).Value = strValue
        End Sub

        
        Sub DefaultCommentTo(strSourceObject, strSourceProperty, strValue, strIgnore)
        	Engine.Item(strSourceObject, iObjectInstanceCount).Item(strSourceProperty).Value = strValue
        End Sub

        
        Sub DefaultIntegerTo(strSourceObject, strSourceProperty, strValue, strIgnore)
        	Engine.Item(strSourceObject, iObjectInstanceCount).Item(strSourceProperty).Value = CLng(strValue)
        End Sub

        
        Sub DefaultCheckboxTo(strSourceObject, strSourceProperty, strValue, strIgnore)
        	Engine.Item(strSourceObject, iObjectInstanceCount).Item(strSourceProperty).Value = CInt(strValue)
        End Sub

        
        Sub DefaultBooleanListTo(strSourceObject, strSourceProperty, strValue, strIgnore)
        	Engine.Item(strSourceObject, iObjectInstanceCount).Item(strSourceProperty).Value = CInt(strValue)
        End Sub

        
        Sub DefaultBooleanRadioTo(strSourceObject, strSourceProperty, strValue, strIgnore)
        	Engine.Item(strSourceObject, iObjectInstanceCount).Item(strSourceProperty).Value = CInt(strValue)
        End Sub

        
        Sub DefaultListTo(strSourceObject, strSourceProperty, strValue, strListCode)
        	If InStr(1, LCase(strValue), "code:", 1) = 1 Then
        		' The default value has been specified as a code (code:<thecode>).
        		Dim code
        		Dim effectiveDate
        		Dim version
        		
        		code = Mid(strValue, Len("code:")+1)
        		effectiveDate = Now()
        		version = 1
        		
        		Dim listItemId
        		listItemId = Extras.GetField(strListCode, strListCode + "_Id", code, effectiveDate, version)
        		
        		Engine.Item(strSourceObject, iObjectInstanceCount).Item(strSourceProperty).Value = CInt(listItemId)
        	Else
        		Engine.Item(strSourceObject, iObjectInstanceCount).Item(strSourceProperty).Value = CInt(strValue)
        	End If
        End Sub

        
        Sub DefaultRateListTo(strSourceObject, strSourceProperty, strValue, strListCode)
        	' TODO.
        End Sub

        
        Sub DefaultDateTo(strSourceObject, strSourceProperty, strValue, strIgnore)
        	
        	Dim location
        	Dim Interval
        	Dim Duration
        	Dim DateValue
        	
        	'Upper case the input
        	DateValue = UCase(strValue)
        	'Check to see if we want data AND  Time
        	location = InStr(1,DateValue,"DATETIME")
        	if location > 0 then
        		DateValue=  CDate(FormatDateTime(Now,0)) 'use the standard vb datetime
        	End If
        	'Check to see if TODAY is specified as a modifier
        	location  = InStr(1,DateValue,"TODAY")
        	If location > 0 Then
        		'Determine if we are adding values
        		location  = InStr(1,DateValue,"+")
        		If location > 0 Then 
        			Interval = Mid(DateValue,location + 1,1)
        			
        			If Interval = "Y" Then
        				Interval = "YYYY"
        			End If
        			
        			If Interval <> "" Then 
        				Duration  = Mid(DateValue,location + 2,Len(DateValue) - (location+1))
        				DateValue = DateAdd(Interval,Duration,CDate(FormatDateTime(Now,2)))	
        				
        			Else
        				'No Interval specified 
        				'Need an error here!!!!
        			End If	
        		Else 
        			'Check to see if we are subtracting values
        			location  =InStr(1,DateValue,"-")
        			If location > 0  Then 
        				Interval = Mid(DateValue,location + 1,1)
        				
        				If Interval <> "" Then 
        					Duration  = Mid(DateValue,location + 2,Len(DateValue) - (location+1))
        					DateValue = DateAdd(Interval, Duration * -1,CDate(FormatDateTime(Now,2)))	
        				Else
        					'No Interval specified 
        					'Need an error here!!!!
        				End If
        			Else
        				'No Function specified, so assume we are just using today's date as a shortdate
        				DateValue = CDate(FormatDateTime(Now,2))
        			End If
        			
        		End If
        		
        	End If	
        	
        	Engine.Item(strSourceObject, iObjectInstanceCount).Item(strSourceProperty).Value = CDate(DateValue)
        End Sub

        
        Sub DefaultCurrencyTo(strSourceObject, strSourceProperty, strValue, strIgnore)
        	Engine.Item(strSourceObject, iObjectInstanceCount).Item(strSourceProperty).Value = CDbl(strValue)
        End Sub

        
        Sub DefaultPercentageTo(strSourceObject, strSourceProperty, strValue, strIgnore)
        	Engine.Item(strSourceObject, iObjectInstanceCount).Item(strSourceProperty).Value = CDbl(strValue)
        End Sub

Sub WebRequired(bIsOnStart)
	If bIsOnStart = True Then
		Engine.NewObject("ENVGITCLAIM")
		Engine.NewObject("ENVGITCLM")
	End If
End Sub

Sub onScreenLogic(bIsOnStart)
        If bIsOnStart = True Then
        
        		 'Instantiate Risk object(s)
        		Extras.RiskDataEngine.NewObject("RISK_DETAILS")
        		Extras.RiskDataEngine.NewObject("INSIDE")
        		Extras.RiskDataEngine.NewObject("OUTSIDE")
        		'Extras.RiskDataEngine.NewObject("EMP_LIAB")
        		'Extras.RiskDataEngine.NewObject("PROD_LIAB")
        		'Extras.RiskDataEngine.NewObject("PUBLIC_LIAB")
        		'Extras.RiskDataEngine.NewObject("SLD")
        		'Extras.RiskDataEngine.NewObject("WARREST")
        
        		'Instantiate Claims object(s)
        		Engine.NewObject("ENVGITCLAIM")
        
        		'---------------------------------------------------
        		'---START: Non-child screen properties population---	
        		'---------------------------------------------------
        
        		Dim PolType, PolCvr, NumVeh, Deduct, Exten, isSpecVeh, is_ITOO
        		Dim RetDateExp, BasisDeduc, RetroDateInc, BasisLmt, RetroDate, isRetroDateInfo, RetroDateInfo
        		Dim LimIndem, BaseRate, Prem
        		Dim InNam, InBasis, InDeduct, Ded
        		Dim OutNam, OutBasis, OutDeduct
        		'Dim EmpChk, EmpBasis, EmpLimit, EmpRate, EmpPrem, EmpBaseDeduct, EmpDeduct
        		'Dim ProdChk, ProdBasis, ProdLimit, ProdRate, ProdPrem, ProdBaseDeduct, ProdDeduct
        		'Dim PubChk, PubBasis, PubLimit, PubRate, PubPrem, PubBaseDeduct, PubDeduct
        		'Dim SLDChk, SLDBasis, SLDLimit, SLDRate, SLDPrem, SLDBaseDeduct, SLDDeduct
        		'Dim WArChk, WArBasis, WArLimit, WArRate, WArPrem, WArBaseDeduct, WArDeduct
        		
        		'Collect data from Policy risk
        		PolType = Extras.RiskDataEngine.Item("RISK_DETAILS").Item("POLICYTYPE").Value
        		PolCvr = Extras.RiskDataEngine.Item("RISK_DETAILS").Item("POLICYCOVER").Value
        		NumVeh = Extras.RiskDataEngine.Item("RISK_DETAILS").Item("NUMVEHICLES").Value
        		is_ITOO = Extras.RiskDataEngine.Item("RISK_DETAILS").Item("ITOOAPPROV").Value
        		Deduct = Extras.RiskDataEngine.Item("RISK_DETAILS").Item("DEDUCTIBLES").Value
        		isSpecVeh = Extras.RiskDataEngine.Item("RISK_DETAILS").Item("IS_SPECVEHBAS").Value
        
        		'Exten = Extras.RiskDataEngine.Item("RISK_DETAILS").Item("EXTENSIONS").Value
        		'RetDateExp = Extras.RiskDataEngine.Item("RISK_DETAILS").Item("RETROACTIVE_DATE_EXPIRY").Value
        		'RetroDateInc = Extras.RiskDataEngine.Item("RISK_DETAILS").Item("RETROACTIVE_DATE_INCEPTION").Value
        
        		RetroDate = Extras.RiskDataEngine.Item("RISK_DETAILS").Item("RETROACTIVE_DATE").Value
        		isRetroDateInfo = Extras.RiskDataEngine.Item("RISK_DETAILS").Item("ADD_RETRO_DATE_INFO").Value
        		RetroDateInfo = Extras.RiskDataEngine.Item("RISK_DETAILS").Item("RETRO_DATE").Value
        
        		LimIndem = Extras.RiskDataEngine.Item("RISK_DETAILS").Item("LIMIT_OF_INDEMNITY").Value
        		BasisLmt = Extras.RiskDataEngine.Item("RISK_DETAILS").Item("BASISOFLIMIT").Value
        		BaseRate = Extras.RiskDataEngine.Item("RISK_DETAILS").Item("BASE_RATE").Value
        		Prem = Extras.RiskDataEngine.Item("RISK_DETAILS").Item("PREMIUM").Value
        
        		Ded = Extras.RiskDataEngine.Item("RISK_DETAILS").Item("DEDUCT").Value
        		BasisDeduc = Extras.RiskDataEngine.Item("RISK_DETAILS").Item("BASISDEDUCT").Value
        		InNam = Extras.RiskDataEngine.Item("INSIDE").Item("INSIDE_NAM").Value
        		InBasis = Extras.RiskDataEngine.Item("INSIDE").Item("BASE_DEDUCT").Value
        		InDeduct = Extras.RiskDataEngine.Item("INSIDE").Item("DEDUCT").Value
        		OutNam = Extras.RiskDataEngine.Item("OUTSIDE").Item("OUTSIDE_NAM").Value
        		OutBasis = Extras.RiskDataEngine.Item("OUTSIDE").Item("BASE_DEDUCT").Value
        		OutDeduct = Extras.RiskDataEngine.Item("OUTSIDE").Item("DEDUCT").Value
        
        		'EmpChk = Extras.RiskDataEngine.Item("EMP_LIAB").Item("EMP_CHK").Value
        		'EmpBasis = Extras.RiskDataEngine.Item("EMP_LIAB").Item("BASE_LIMIT").Value
        		'EmpLimit = Extras.RiskDataEngine.Item("EMP_LIAB").Item("LIMIT_OF_INDEMNITY").Value
        		'EmpRate = Extras.RiskDataEngine.Item("EMP_LIAB").Item("BASE_RATE").Value
        		'EmpPrem = Extras.RiskDataEngine.Item("EMP_LIAB").Item("PREMIUM").Value
        		'EmpBaseDeduct = Extras.RiskDataEngine.Item("EMP_LIAB").Item("BASE_DEDUCT").Value
        		'EmpDeduct = Extras.RiskDataEngine.Item("EMP_LIAB").Item("DEDUCT").Value
        		'ProdChk = Extras.RiskDataEngine.Item("PROD_LIAB").Item("PROD_CHK").Value
        		'ProdBasis = Extras.RiskDataEngine.Item("PROD_LIAB").Item("BASE_LIMIT").Value
        		'ProdLimit = Extras.RiskDataEngine.Item("PROD_LIAB").Item("LIMIT_OF_INDEMNITY").Value
        		'ProdRate = Extras.RiskDataEngine.Item("PROD_LIAB").Item("BASE_RATE").Value
        		'ProdPrem = Extras.RiskDataEngine.Item("PROD_LIAB").Item("PREMIUM").Value
        		'ProdBaseDeduct = Extras.RiskDataEngine.Item("PROD_LIAB").Item("BASE_DEDUCT").Value
        		'ProdDeduct = Extras.RiskDataEngine.Item("PROD_LIAB").Item("DEDUCT").Value
        		'PubChk = Extras.RiskDataEngine.Item("PUBLIC_LIAB").Item("PUBLIC_CHK").Value
        		'PubBasis = Extras.RiskDataEngine.Item("PUBLIC_LIAB").Item("BASE_LIMIT").Value
        		'PubLimit = Extras.RiskDataEngine.Item("PUBLIC_LIAB").Item("LIMIT_OF_INDEMNITY").Value
        		'PubRate = Extras.RiskDataEngine.Item("PUBLIC_LIAB").Item("BASE_RATE").Value
        		'PubPrem = Extras.RiskDataEngine.Item("PUBLIC_LIAB").Item("PREMIUM").Value
        		'PubBaseDeduct = Extras.RiskDataEngine.Item("PUBLIC_LIAB").Item("BASE_DEDUCT").Value
        		'PubDeduct = Extras.RiskDataEngine.Item("PUBLIC_LIAB").Item("DEDUCT").Value
        		'SLDChk = Extras.RiskDataEngine.Item("SLD").Item("SLDC_CHCK").Value
        		'SLDBasis = Extras.RiskDataEngine.Item("SLD").Item("BASE_LIMIT").Value
        		'SLDLimit = Extras.RiskDataEngine.Item("SLD").Item("LIMIT_OF_INDEMNITY").Value
        		'SLDRate = Extras.RiskDataEngine.Item("SLD").Item("BASE_RATE").Value
        		'SLDPrem = Extras.RiskDataEngine.Item("SLD").Item("PREMIUM").Value
        		'SLDBaseDeduct = Extras.RiskDataEngine.Item("SLD").Item("BASE_DEDUCT").Value
        		'SLDDeduct = Extras.RiskDataEngine.Item("SLD").Item("DEDUCT").Value
        		'WArChk = Extras.RiskDataEngine.Item("WARREST").Item("WARREST_CHK").Value
        		'WArBasis = Extras.RiskDataEngine.Item("WARREST").Item("BASE_LIMIT").Value
        		'WArLimit = Extras.RiskDataEngine.Item("WARREST").Item("LIMIT_OF_INDEMNITY").Value
        		'WArRate = Extras.RiskDataEngine.Item("WARREST").Item("BASE_RATE").Value
        		'WArPrem = Extras.RiskDataEngine.Item("WARREST").Item("PREMIUM").Value
        		'WArBaseDeduct = Extras.RiskDataEngine.Item("WARREST").Item("BASE_DEDUCT").Value
        		'WArDeduct = Extras.RiskDataEngine.Item("WARREST").Item("DEDUCT").Value
        		
        		'Send data to the claim screen
        		
        		Engine.Item("ENVGITCLAIM").Item("POLICYTYPE").Value = PolType
        		Engine.Item("ENVGITCLAIM").Item("POLICYCOVER").Value = PolCvr
        		Engine.Item("ENVGITCLAIM").Item("NUMVEHICLES").Value = NumVeh
        		Engine.Item("ENVGITCLAIM").Item("DEDUCTIBLES").Value = Deduct
        		Engine.Item("ENVGITCLAIM").Item("ITOOAPPROV").Value = is_ITOO
        		Engine.Item("ENVGITCLAIM").Item("IS_SPECVEHBAS").Value = isSpecVeh
        
        		'Engine.Item("ENVGITCLAIM").Item("EXTENSIONS").Value = Exten
        		'Engine.Item("ENVGITCLAIM").Item("RETROACTIVE_DATE_EXPIRY").Value = RetDateExp
        		'Engine.Item("ENVGITCLAIM").Item("RETROACTIVE_DATE_INCEPTION").Value = RetroDateInc
        
        		Engine.Item("ENVGITCLAIM").Item("RETROACTIVE_DATE").Value = RetroDate
        		Engine.Item("ENVGITCLAIM").Item("ADD_RETRO_DATE_INFO").Value = isRetroDateInfo
        		Engine.Item("ENVGITCLAIM").Item("RETRO_DATE").Value = RetroDateInfo
        
        		Engine.Item("ENVGITCLAIM").Item("LIMIT_OF_INDEMNITY").Value = LimIndem
        		Engine.Item("ENVGITCLAIM").Item("BASISOFLIMIT").Value = BasisLmt
        		Engine.Item("ENVGITCLAIM").Item("BASE_RATE").Value = BaseRate
        		Engine.Item("ENVGITCLAIM").Item("PREMIUM").Value = Prem
        
        		Engine.Item("ENVGITCLAIM").Item("DEDUCT").Value = Ded
        		Engine.Item("ENVGITCLAIM").Item("BASISDEDUCT").Value = BasisDeduc
        		Engine.Item("ENVGITCLAIM").Item("INSIDE_NAM").Value = InNam
        		Engine.Item("ENVGITCLAIM").Item("IN_BASE_DEDUCT").Value = InBasis
        		Engine.Item("ENVGITCLAIM").Item("IN_DEDUCT").Value = InDeduct
        		Engine.Item("ENVGITCLAIM").Item("OUTSIDE_NAM").Value = OutNam
        		Engine.Item("ENVGITCLAIM").Item("OUT_BASE_DEDUCT").Value = OutBasis
        		Engine.Item("ENVGITCLAIM").Item("OUT_DEDUCT").Value = OutDeduct
        
        		'Engine.Item("ENVGITCLAIM").Item("EMP_CHK").Value = EmpChk
        		'Engine.Item("ENVGITCLAIM").Item("EMP_BASISLMT").Value = EmpBasis
        		'Engine.Item("ENVGITCLAIM").Item("EMP_LMTINDEM").Value = EmpLimit
        		'Engine.Item("ENVGITCLAIM").Item("EMP_BASERATE").Value = EmpRate
        		'Engine.Item("ENVGITCLAIM").Item("EMP_PREM").Value = EmpPrem
        		'Engine.Item("ENVGITCLAIM").Item("EMP_BASEDED").Value = EmpBaseDeduct
        		'Engine.Item("ENVGITCLAIM").Item("EMP_DED").Value = EmpDeduct
        		'Engine.Item("ENVGITCLAIM").Item("PROD_CHK").Value = ProdChk
        		'Engine.Item("ENVGITCLAIM").Item("PROD_BASISLMT").Value = ProdBasis
        		'Engine.Item("ENVGITCLAIM").Item("PROD_LMTINDEM").Value = ProdLimit
        		'Engine.Item("ENVGITCLAIM").Item("PROD_BASERATE").Value = ProdRate
        		'Engine.Item("ENVGITCLAIM").Item("PROD_PREM").Value = ProdPrem
        		'Engine.Item("ENVGITCLAIM").Item("PROD_BASEDED").Value = ProdBaseDeduct
        		'Engine.Item("ENVGITCLAIM").Item("PROD_DED").Value = ProdDeduct
        		'Engine.Item("ENVGITCLAIM").Item("PUBLIC_CHK").Value = PubChk
        		'Engine.Item("ENVGITCLAIM").Item("PUBLIC_BASISLMT").Value = PubBasis
        		'Engine.Item("ENVGITCLAIM").Item("PUBLIC_LMTINDEM").Value = PubLimit
        		'Engine.Item("ENVGITCLAIM").Item("PUBLIC_BASERATE").Value = PubRate
        		'Engine.Item("ENVGITCLAIM").Item("PUBLIC_PREM").Value = PubPrem
        		'Engine.Item("ENVGITCLAIM").Item("PUBLIC_BASEDED").Value = PubBaseDeduct
        		'Engine.Item("ENVGITCLAIM").Item("PUBLIC_DED").Value = PubDeduct
        		'Engine.Item("ENVGITCLAIM").Item("SLDC_CHCK").Value = SLDChk
        		'Engine.Item("ENVGITCLAIM").Item("SLDC_BASISLMT").Value = SLDBasis
        		'Engine.Item("ENVGITCLAIM").Item("SLDC_LMTINDEM").Value = SLDLimit
        		'Engine.Item("ENVGITCLAIM").Item("SLDC_BASERATE").Value = SLDRate
        		'Engine.Item("ENVGITCLAIM").Item("SLDC_PREM").Value = SLDPrem
        		'Engine.Item("ENVGITCLAIM").Item("SLDC_BASEDED").Value = SLDBaseDeduct
        		'Engine.Item("ENVGITCLAIM").Item("SLDC_DED").Value = SLDDeduct
        		'Engine.Item("ENVGITCLAIM").Item("WARREST_CHK").Value = WArChk
        		'Engine.Item("ENVGITCLAIM").Item("WARREST_BASISLMT").Value = WArBasis
        		'Engine.Item("ENVGITCLAIM").Item("WARREST_LMTINDEM").Value = WArLimit
        		'Engine.Item("ENVGITCLAIM").Item("WARREST_BASERATE").Value = WArRate
        		'Engine.Item("ENVGITCLAIM").Item("WARREST_PREM").Value = WArPrem
        		'Engine.Item("ENVGITCLAIM").Item("WARREST_BASEDED").Value = WArBaseDeduct
        		'Engine.Item("ENVGITCLAIM").Item("WARREST_DED").Value = WArDeduct
        
        		Dim x, cnt, nIndex
        
        		cnt = Extras.RiskDataEngine.Count("SVBASIS")
        
        		For nIndex = 1 To cnt
        			Dim RegNum
        			Engine.Item("ENVGITCLAIM").NewObject("SVBASISCLM")
        
        			RegNum = Extras.RiskDataEngine.Item("SVBASIS", nIndex).Item("REGNUM").Value
        
        			Engine.Item("ENVGITCLAIM").Item("SVBASISCLM", nIndex).Item("REGNUM").Value = RegNum
        		Next
        	
        		Call DoInstanceCount
         End If
        End Sub

        Sub DoInstanceCount
        ' The ScreenMain rule is added to every screen automatically.
        
        
        Call FindObjectInstanceCount("")
End Sub

Sub onValidate_ENVGITCLAIM__THIRDPARTY(bIsOnStart)
        If bIsOnStart = True Then
        	Call DefaultCheckboxTo("ENVGITCLAIM", "THIRDPARTY", "0", "{listcode}")
        End If
End Sub

Sub onValidate_ENVGITCLAIM__RECOVERY(bIsOnStart)
        If bIsOnStart = True Then
        	Call DefaultCheckboxTo("ENVGITCLAIM", "RECOVERY", "0", "{listcode}")
        End If
End Sub

Sub onValidate_ENVGITCLAIM__SALVAGE(bIsOnStart)
        If bIsOnStart = True Then
        	Call DefaultCheckboxTo("ENVGITCLAIM", "SALVAGE", "0", "{listcode}")
        End If
End Sub

Sub onValidate_ENVGITCLAIM__IS_THRDTLS(bIsOnStart)
        If bIsOnStart = True Then
        	Call DefaultCheckboxTo("ENVGITCLAIM", "IS_THRDTLS", "0", "{listcode}")
        End If
End Sub

Sub onValidate_ENVGITCLAIM__IS_ASSESSDETAIL(bIsOnStart)
        If bIsOnStart = True Then
        	Call DefaultCheckboxTo("ENVGITCLAIM", "IS_ASSESSDETAIL", "0", "{listcode}")
        End If
End Sub

Sub onValidate_ENVGITCLAIM__IS_NAMAPP(bIsOnStart)
        If bIsOnStart = True Then
        	Call DefaultCheckboxTo("ENVGITCLAIM", "IS_NAMAPP", "0", "{listcode}")
        End If
End Sub

Sub onValidate_ENVGITCLAIM__IS_EXGRAT(bIsOnStart)
        If bIsOnStart = True Then
        	Call DefaultCheckboxTo("ENVGITCLAIM", "IS_EXGRAT", "0", "{listcode}")
        End If
End Sub

Sub onValidate_ENVGITCLM__ASSESSOR(bIsOnStart)
        If bIsOnStart = True Then
        	Call DefaultCheckboxTo("ENVGITCLM", "ASSESSOR", "0", "{listcode}")
        End If
End Sub

Sub onValidate_ENVGITCLM__LAWYRS(bIsOnStart)
        If bIsOnStart = True Then
        	Call DefaultCheckboxTo("ENVGITCLM", "LAWYRS", "0", "{listcode}")
        End If
End Sub

Sub onValidate_ENVGITCLM__WITNESS(bIsOnStart)
        If bIsOnStart = True Then
        	Call DefaultCheckboxTo("ENVGITCLM", "WITNESS", "0", "{listcode}")
        End If
End Sub

Sub DoDefaults(bIsOnStart)
    Call WebRequired(bIsOnStart)
    Call onScreenLogic(bIsOnStart)
    Call onValidate_ENVGITCLAIM__THIRDPARTY(bIsOnStart)
    Call onValidate_ENVGITCLAIM__RECOVERY(bIsOnStart)
    Call onValidate_ENVGITCLAIM__SALVAGE(bIsOnStart)
    Call onValidate_ENVGITCLAIM__IS_THRDTLS(bIsOnStart)
    Call onValidate_ENVGITCLAIM__IS_ASSESSDETAIL(bIsOnStart)
    Call onValidate_ENVGITCLAIM__IS_NAMAPP(bIsOnStart)
    Call onValidate_ENVGITCLAIM__IS_EXGRAT(bIsOnStart)
    Call onValidate_ENVGITCLM__ASSESSOR(bIsOnStart)
    Call onValidate_ENVGITCLM__LAWYRS(bIsOnStart)
    Call onValidate_ENVGITCLM__WITNESS(bIsOnStart)
End Sub

Sub Start()
    Call DoDefaults(True)
End Sub

Sub Main()
    Call DoDefaults(False)
End Sub

