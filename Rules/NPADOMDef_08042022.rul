        Dim iObjectInstanceCount
        
        Sub FindObjectInstanceCount(strScreenObjectName)
        	iObjectInstanceCount = 1
        
        	' strScreenObjectName is the object that is associate with this screen (if a child), or "" if the root screen.
        	If strScreenObjectName <> ""  Then
        		Dim instanceCount
        		
        		' How many instance of this object exist?
        		instanceCount = engine.count(strScreenObjectName)
        		
        		Dim i
        		for i = 1 to instanceCount
        			if engine.item(strScreenObjectName, i).item("OI").value = vAdditionalData(cAdditionalData_OIKey) then
        				iObjectInstanceCount = i
        			end if
        		next
        	End If
        End Sub

        Sub DefaultTextTo(strSourceObject, strSourceProperty, strValue, strIgnore)
        	Engine.Item(strSourceObject, iObjectInstanceCount).Item(strSourceProperty).Value = strValue
        End Sub

        
        Sub DefaultCommentTo(strSourceObject, strSourceProperty, strValue, strIgnore)
        	Engine.Item(strSourceObject, iObjectInstanceCount).Item(strSourceProperty).Value = strValue
        End Sub

        
        Sub DefaultIntegerTo(strSourceObject, strSourceProperty, strValue, strIgnore)
        	Engine.Item(strSourceObject, iObjectInstanceCount).Item(strSourceProperty).Value = CLng(strValue)
        End Sub

        
        Sub DefaultCheckboxTo(strSourceObject, strSourceProperty, strValue, strIgnore)
        	Engine.Item(strSourceObject, iObjectInstanceCount).Item(strSourceProperty).Value = CInt(strValue)
        End Sub

        
        Sub DefaultBooleanListTo(strSourceObject, strSourceProperty, strValue, strIgnore)
        	Engine.Item(strSourceObject, iObjectInstanceCount).Item(strSourceProperty).Value = CInt(strValue)
        End Sub

        
        Sub DefaultBooleanRadioTo(strSourceObject, strSourceProperty, strValue, strIgnore)
        	Engine.Item(strSourceObject, iObjectInstanceCount).Item(strSourceProperty).Value = CInt(strValue)
        End Sub

        
        Sub DefaultListTo(strSourceObject, strSourceProperty, strValue, strListCode)
        	If InStr(1, LCase(strValue), "code:", 1) = 1 Then
        		' The default value has been specified as a code (code:<thecode>).
        		Dim code
        		Dim effectiveDate
        		Dim version
        		
        		code = Mid(strValue, Len("code:")+1)
        		effectiveDate = Now()
        		version = 1
        		
        		Dim listItemId
        		listItemId = Extras.GetField(strListCode, strListCode + "_Id", code, effectiveDate, version)
        		
        		Engine.Item(strSourceObject, iObjectInstanceCount).Item(strSourceProperty).Value = CInt(listItemId)
        	Else
        		Engine.Item(strSourceObject, iObjectInstanceCount).Item(strSourceProperty).Value = CInt(strValue)
        	End If
        End Sub

        
        Sub DefaultRateListTo(strSourceObject, strSourceProperty, strValue, strListCode)
        	' TODO.
        End Sub

        
        Sub DefaultDateTo(strSourceObject, strSourceProperty, strValue, strIgnore)
        	
        	Dim location
        	Dim Interval
        	Dim Duration
        	Dim DateValue
        	
        	'Upper case the input
        	DateValue = UCase(strValue)
        	'Check to see if we want data AND  Time
        	location = InStr(1,DateValue,"DATETIME")
        	if location > 0 then
        		DateValue=  CDate(FormatDateTime(Now,0)) 'use the standard vb datetime
        	End If
        	'Check to see if TODAY is specified as a modifier
        	location  = InStr(1,DateValue,"TODAY")
        	If location > 0 Then
        		'Determine if we are adding values
        		location  = InStr(1,DateValue,"+")
        		If location > 0 Then 
        			Interval = Mid(DateValue,location + 1,1)
        			
        			If Interval = "Y" Then
        				Interval = "YYYY"
        			End If
        			
        			If Interval <> "" Then 
        				Duration  = Mid(DateValue,location + 2,Len(DateValue) - (location+1))
        				DateValue = DateAdd(Interval,Duration,CDate(FormatDateTime(Now,2)))	
        				
        			Else
        				'No Interval specified 
        				'Need an error here!!!!
        			End If	
        		Else 
        			'Check to see if we are subtracting values
        			location  =InStr(1,DateValue,"-")
        			If location > 0  Then 
        				Interval = Mid(DateValue,location + 1,1)
        				
        				If Interval <> "" Then 
        					Duration  = Mid(DateValue,location + 2,Len(DateValue) - (location+1))
        					DateValue = DateAdd(Interval, Duration * -1,CDate(FormatDateTime(Now,2)))	
        				Else
        					'No Interval specified 
        					'Need an error here!!!!
        				End If
        			Else
        				'No Function specified, so assume we are just using today's date as a shortdate
        				DateValue = CDate(FormatDateTime(Now,2))
        			End If
        			
        		End If
        		
        	End If	
        	
        	Engine.Item(strSourceObject, iObjectInstanceCount).Item(strSourceProperty).Value = CDate(DateValue)
        End Sub

        
        Sub DefaultCurrencyTo(strSourceObject, strSourceProperty, strValue, strIgnore)
        	Engine.Item(strSourceObject, iObjectInstanceCount).Item(strSourceProperty).Value = CDbl(strValue)
        End Sub

        
        Sub DefaultPercentageTo(strSourceObject, strSourceProperty, strValue, strIgnore)
        	Engine.Item(strSourceObject, iObjectInstanceCount).Item(strSourceProperty).Value = CDbl(strValue)
        End Sub

Sub WebRequired(bIsOnStart)
	If bIsOnStart = True Then
		Engine.NewObject("GENERAL")
		Engine.NewObject("ADDRESS")
		Engine.NewObject("BUILDINGS")
		Engine.NewObject("CONTENTS")
		Engine.NewObject("ALLRISK")
		Engine.NewObject("PLIP")
		Engine.NewObject("MECHELECTRIC")
		Engine.NewObject("REFERRAL_CLAUSES")
		Engine.NewObject("NOTES")
	End If
End Sub

Sub onScreenLogic(bIsOnStart)
		
		'--------------------MOTOR Quote Date--------------------'
        Dim TransactionType
        Dim dtAnniversaryDate
        Dim dtRenewalDate
        Dim dYear
        Dim lTrueMonthly
        Dim dtQuoteDate
        TransactionType = Extras.TransactionType
        
        If TransactionType <> "NB" Then
        	'Get dates
        	Call Extras.CallNamedStoredProcedure(6722, CStr("GetPreviousVersionDates"), vResults)
        	If IsArray(vResults) = True Then		
        		dtAnniversaryDate  = vResults(2, 0)
        		dtRenewalDate  = vResults(3, 0)
        	End If
        	
        	If TransactionType = "REN" Then
        		If (Extras.IsTrueMonthlyPolicy = False) Then
        			If Extras.CoverStartDate = dtRenewalDate Then
        				'Assign the new Quote Date for Annivesary Renewal
        				Engine.Item("GENERAL").Item("QUOTEDATE").Value = Extras.CoverStartDate
        			End If
        		Else
        			If Extras.CoverStartDate = dtAnniversaryDate Then
        				'Assign the new Quote Date for Annivesary Renewal
        				Engine.Item("GENERAL").Item("QUOTEDATE").Value = Extras.CoverStartDate 
        			End If
        		End If
        	Else
        		'Get Quote Date
        		lTrueMonthly = 0
        		If (Extras.IsTrueMonthlyPolicy = True) Then
        			lTrueMonthly = 1
        		End If
        		vExtraParameters = array("lTrueMonthly",lTrueMonthly)
        		Call Extras.CallNamedStoredProcedure(CLng(6722), CStr("GetPLMotorQuoteDate"), vResults, vExtraParameters)
        		If IsArray(vResults) = True Then		
        			dtQuoteDate  = vResults(0, 0)
        		End If
        		Engine.Item("GENERAL").Item("QUOTEDATE").Value = dtQuoteDate
        	End If
        End If
        
        '***********************************************************************
        '	Duplicate Client Check
        '***********************************************************************
        If bIsOnStart = True Then
        Dim vResults
        Dim ResultTwo
        Dim ResultThree
        Dim DisplayReason
        Dim PartyCounts 	
        Dim CountElements
        Dim CheckVariable
        Dim vExtraParameter(1)
        Dim d
        
        vExtraParameter(0) ="lCheckValidPartyCount"
        
        		Call Extras.CallNamedStoredProcedure(CLng(6722), CStr("check_party_counts"), PartyCounts)
        		
          For each d in PartyCounts
         
        		 vExtraParameter(1) = d  
        									
        		Call Extras.CallNamedStoredProcedure(CLng(6722), CStr("Check_Duplicate_Policy_Two"), vResults, vExtraParameter)
        		If IsArray(vResults) Then
        		   DisplayReason = vResults(0,0)
        		End If
        	
        		Call Extras.CallNamedStoredProcedure(CLng(6722), CStr("Check_Qoute_Two"), ResultTwo, vExtraParameter)
        		If IsArray(ResultTwo) Then
        			DisplayReason = DisplayReason & vbCrLf & ResultTwo(0,0)
        		End If
        		
        		Call Extras.CallNamedStoredProcedure(CLng(6722), CStr("Check_Cancellation_Two"), ResultThree, vExtraParameter)
        		If IsArray(ResultThree) Then
        		    DisplayReason = DisplayReason & vbCrLf &  ResultThree(0,0)
        			
        		End If
        		Engine.Item("GENERAL").item("DUPLIC_CLIENT_CHECK_REASON").Value = DisplayReason
        		Exit For
        	Next
        
        		Call DoInstanceCount
        End If
        
        '***********************************************************************
        '	User Mandates
        '***********************************************************************
        Dim sUser, sMandate, sNoAlarm, sIsExempt, sUdl, sProdCode, sUserGroup
        Dim vExtraParameters, iRet
        Dim arrSPUserGroup, arrSPMandate
        
        sProdCode = "NPA"
        sUser = Extras.Username
        
        '--------------------CONTENTS SANTIONS--------------------'
        
        'Get User group of logged in User
        sMandate = "CONTENT"
        
        vExtraParameters = Array("sUsername",CStr(sUser),"sMandateType",CStr(sMandate))
        iRet = Extras.CallNamedStoredProcedure(CLng(6722), CStr("GetUserGroups"), arrSPUserGroup,vExtraParameters)
        
        If IsArray(arrSPUserGroup) Then
        	sNoAlarm = arrSPUserGroup(0,0)
        End If
        
        If sNoAlarm = "True" Then
        	Engine.item("GENERAL").item("CONTENTSANC").Value = "1" 
        Else
        	Engine.item("GENERAL").item("CONTENTSANC").Value = "0"
        End If
        
        '--------------------SI EXEMPT SANCTION-------------------'
        
        sMandate = "SI"
        
        vExtraParameters = array("sUsername",sUser,"sMandateType",sMandate)
        iRet = Extras.CallNamedStoredProcedure(CLng(6722), CStr("GetUserGroups"), arrSPUserGroup,vExtraParameters)
        
        If IsArray(arrSPUserGroup) Then
        	sIsExempt = arrSPUserGroup(1,0)
        End If
        
        If sIsExempt = "False" Then
        	Engine.item("GENERAL").item("SISANC").Value = "0" 
        Else
        	Engine.item("GENERAL").item("SISANC").Value = "1"
        End If
        
        '--------------------DISCOUNT SANTIONS--------------------'
        
        'Get User group of logged in User
        sMandate = "DISCOUNT"
        
        vExtraParameters = Array("sUsername",CStr(sUser),"sMandateType",CStr(sMandate))
        iRet = Extras.CallNamedStoredProcedure(CLng(6722), CStr("GetUserGroups"), arrSPUserGroup,vExtraParameters)
        
        If IsArray(arrSPUserGroup) Then
        	sUserGroup = arrSPUserGroup(0,0)
        End If	
        
        'Retrieve Mandate values for the usergroup
        sUdl = "UDL_KUSRDISC"
        vExtraParameters = array("sUDLName",CStr(sUdl),"sCode",CStr(sUserGroup),"sProdCode",CStr(sProdCode))
        iRet = Extras.CallNamedStoredProcedure(CLng(6722), CStr("GetMandateAmounts"), arrSPMandate,vExtraParameters)
        
        If IsArray(arrSPMandate) Then
        	Engine.item("GENERAL").item("DISCSANC").Value = arrSPMandate(0,0)
        End If
        
        End Sub

        Sub DoInstanceCount
        ' The ScreenMain rule is added to every screen automatically.
        
        
        Call FindObjectInstanceCount("")
End Sub

Sub onValidate_GENERAL__IS_MTA_REASON(bIsOnStart)
        If bIsOnStart = True Then
        	Call DefaultCheckboxTo("GENERAL", "IS_MTA_REASON", "0", "{listcode}")
        End If
End Sub

Sub onValidate_GENERAL__ACCEPT_DUPLIC_CLIENT(bIsOnStart)
        If bIsOnStart = True Then
        	Call DefaultCheckboxTo("GENERAL", "ACCEPT_DUPLIC_CLIENT", "0", "{listcode}")
        End If
End Sub

Sub onValidate_GENERAL__IS_LIGHTCOND(bIsOnStart)
        If bIsOnStart = True Then
        	Call DefaultCheckboxTo("GENERAL", "IS_LIGHTCOND", "0", "{listcode}")
        End If
End Sub

Sub onValidate_GENERAL__IS_COMMUNE(bIsOnStart)
        If bIsOnStart = True Then
        	Call DefaultCheckboxTo("GENERAL", "IS_COMMUNE", "0", "{listcode}")
        End If
End Sub

Sub onValidate_GENERAL__IS_HOLIDAYH(bIsOnStart)
        If bIsOnStart = True Then
        	Call DefaultCheckboxTo("GENERAL", "IS_HOLIDAYH", "0", "{listcode}")
        End If
End Sub

Sub onValidate_GENERAL__IS_BUILDINGS(bIsOnStart)
        If bIsOnStart = True Then
        	Call DefaultCheckboxTo("GENERAL", "IS_BUILDINGS", "0", "{listcode}")
        End If
End Sub

Sub onValidate_GENERAL__IS_CONTENTS(bIsOnStart)
        If bIsOnStart = True Then
        	Call DefaultCheckboxTo("GENERAL", "IS_CONTENTS", "0", "{listcode}")
        End If
End Sub

Sub onValidate_GENERAL__IS_ALLRISKS(bIsOnStart)
        If bIsOnStart = True Then
        	Call DefaultCheckboxTo("GENERAL", "IS_ALLRISKS", "0", "{listcode}")
        End If
End Sub

Sub onValidate_GENERAL__IS_PLIP(bIsOnStart)
        If bIsOnStart = True Then
        	Call DefaultCheckboxTo("GENERAL", "IS_PLIP", "0", "{listcode}")
        End If
End Sub

Sub onValidate_GENERAL__IS_MECH_ELECT(bIsOnStart)
        If bIsOnStart = True Then
        	Call DefaultCheckboxTo("GENERAL", "IS_MECH_ELECT", "0", "{listcode}")
        End If
End Sub

Sub onValidate_BUILDINGS__IS_SURVEYDONE(bIsOnStart)
        If bIsOnStart = True Then
        	Call DefaultCheckboxTo("BUILDINGS", "IS_SURVEYDONE", "0", "{listcode}")
        End If
End Sub

Sub onValidate_BUILDINGS__GEYSEREXC(bIsOnStart)
        If bIsOnStart = True Then
        	Call DefaultCurrencyTo("BUILDINGS", "GEYSEREXC", "1000", "{listcode}")
        End If
End Sub

Sub onValidate_BUILDINGS__IS_MATCHINGBUILD(bIsOnStart)
        If bIsOnStart = True Then
        	Call DefaultCheckboxTo("BUILDINGS", "IS_MATCHINGBUILD", "0", "{listcode}")
        End If
End Sub

Sub onValidate_BUILDINGS__IS_SUBSIDENCE(bIsOnStart)
        If bIsOnStart = True Then
        	Call DefaultCheckboxTo("BUILDINGS", "IS_SUBSIDENCE", "0", "{listcode}")
        End If
End Sub

Sub onValidate_BUILDINGS__IS_MECHANICAL(bIsOnStart)
        If bIsOnStart = True Then
        	Call DefaultCheckboxTo("BUILDINGS", "IS_MECHANICAL", "0", "{listcode}")
        End If
End Sub

Sub onValidate_BUILDINGS__LAST_TWELVE(bIsOnStart)
        If bIsOnStart = True Then
        	Call DefaultIntegerTo("BUILDINGS", "LAST_TWELVE", "0", "{listcode}")
        End If
End Sub

Sub onValidate_BUILDINGS__LAST_TWOFOUR(bIsOnStart)
        If bIsOnStart = True Then
        	Call DefaultIntegerTo("BUILDINGS", "LAST_TWOFOUR", "0", "{listcode}")
        End If
End Sub

Sub onValidate_BUILDINGS__LAST_THREESIX(bIsOnStart)
        If bIsOnStart = True Then
        	Call DefaultIntegerTo("BUILDINGS", "LAST_THREESIX", "0", "{listcode}")
        End If
End Sub

Sub onValidate_CONTENTS__IS_SURVEYDONE(bIsOnStart)
        If bIsOnStart = True Then
        	Call DefaultCheckboxTo("CONTENTS", "IS_SURVEYDONE", "0", "{listcode}")
        End If
End Sub

Sub onValidate_CONTENTS__IS_INVENTORY(bIsOnStart)
        If bIsOnStart = True Then
        	Call DefaultCheckboxTo("CONTENTS", "IS_INVENTORY", "0", "{listcode}")
        End If
End Sub

Sub onValidate_CONTENTS__IS_INVENTRECVD(bIsOnStart)
        If bIsOnStart = True Then
        	Call DefaultCheckboxTo("CONTENTS", "IS_INVENTRECVD", "0", "{listcode}")
        End If
End Sub

Sub onValidate_CONTENTS__IS_SECGATE(bIsOnStart)
        If bIsOnStart = True Then
        	Call DefaultCheckboxTo("CONTENTS", "IS_SECGATE", "0", "{listcode}")
        End If
End Sub

Sub onValidate_CONTENTS__IS_ACCESSCONT(bIsOnStart)
        If bIsOnStart = True Then
        	Call DefaultCheckboxTo("CONTENTS", "IS_ACCESSCONT", "0", "{listcode}")
        End If
End Sub

Sub onValidate_CONTENTS__IS_SECCOMPLEX(bIsOnStart)
        If bIsOnStart = True Then
        	Call DefaultCheckboxTo("CONTENTS", "IS_SECCOMPLEX", "0", "{listcode}")
        End If
End Sub

Sub onValidate_CONTENTS__IS_ELECTFENCE(bIsOnStart)
        If bIsOnStart = True Then
        	Call DefaultCheckboxTo("CONTENTS", "IS_ELECTFENCE", "0", "{listcode}")
        End If
End Sub

Sub onValidate_CONTENTS__IS_BURGLARBAR(bIsOnStart)
        If bIsOnStart = True Then
        	Call DefaultCheckboxTo("CONTENTS", "IS_BURGLARBAR", "0", "{listcode}")
        End If
End Sub

Sub onValidate_CONTENTS__IS_ACCDAMAGE(bIsOnStart)
        If bIsOnStart = True Then
        	Call DefaultCheckboxTo("CONTENTS", "IS_ACCDAMAGE", "0", "{listcode}")
        End If
End Sub

Sub onValidate_CONTENTS__IS_SUBSIDENCE(bIsOnStart)
        If bIsOnStart = True Then
        	Call DefaultCheckboxTo("CONTENTS", "IS_SUBSIDENCE", "0", "{listcode}")
        End If
End Sub

Sub onValidate_CONTENTS__LAST_TWELVE(bIsOnStart)
        If bIsOnStart = True Then
        	Call DefaultIntegerTo("CONTENTS", "LAST_TWELVE", "0", "{listcode}")
        End If
End Sub

Sub onValidate_CONTENTS__LAST_TWOFOUR(bIsOnStart)
        If bIsOnStart = True Then
        	Call DefaultIntegerTo("CONTENTS", "LAST_TWOFOUR", "0", "{listcode}")
        End If
End Sub

Sub onValidate_CONTENTS__LAST_THREESIX(bIsOnStart)
        If bIsOnStart = True Then
        	Call DefaultIntegerTo("CONTENTS", "LAST_THREESIX", "0", "{listcode}")
        End If
End Sub

Sub DoDefaults(bIsOnStart)
    Call WebRequired(bIsOnStart)
    Call onScreenLogic(bIsOnStart)
    Call onValidate_GENERAL__IS_MTA_REASON(bIsOnStart)
    Call onValidate_GENERAL__ACCEPT_DUPLIC_CLIENT(bIsOnStart)
    Call onValidate_GENERAL__IS_LIGHTCOND(bIsOnStart)
    Call onValidate_GENERAL__IS_COMMUNE(bIsOnStart)
    Call onValidate_GENERAL__IS_HOLIDAYH(bIsOnStart)
    Call onValidate_GENERAL__IS_BUILDINGS(bIsOnStart)
    Call onValidate_GENERAL__IS_CONTENTS(bIsOnStart)
    Call onValidate_GENERAL__IS_ALLRISKS(bIsOnStart)
    Call onValidate_GENERAL__IS_PLIP(bIsOnStart)
    Call onValidate_GENERAL__IS_MECH_ELECT(bIsOnStart)
    Call onValidate_BUILDINGS__IS_SURVEYDONE(bIsOnStart)
    Call onValidate_BUILDINGS__GEYSEREXC(bIsOnStart)
    Call onValidate_BUILDINGS__IS_MATCHINGBUILD(bIsOnStart)
    Call onValidate_BUILDINGS__IS_SUBSIDENCE(bIsOnStart)
    Call onValidate_BUILDINGS__IS_MECHANICAL(bIsOnStart)
    Call onValidate_BUILDINGS__LAST_TWELVE(bIsOnStart)
    Call onValidate_BUILDINGS__LAST_TWOFOUR(bIsOnStart)
    Call onValidate_BUILDINGS__LAST_THREESIX(bIsOnStart)
    Call onValidate_CONTENTS__IS_SURVEYDONE(bIsOnStart)
    Call onValidate_CONTENTS__IS_INVENTORY(bIsOnStart)
    Call onValidate_CONTENTS__IS_INVENTRECVD(bIsOnStart)
    Call onValidate_CONTENTS__IS_SECGATE(bIsOnStart)
    Call onValidate_CONTENTS__IS_ACCESSCONT(bIsOnStart)
    Call onValidate_CONTENTS__IS_SECCOMPLEX(bIsOnStart)
    Call onValidate_CONTENTS__IS_ELECTFENCE(bIsOnStart)
    Call onValidate_CONTENTS__IS_BURGLARBAR(bIsOnStart)
    Call onValidate_CONTENTS__IS_ACCDAMAGE(bIsOnStart)
    Call onValidate_CONTENTS__IS_SUBSIDENCE(bIsOnStart)
    Call onValidate_CONTENTS__LAST_TWELVE(bIsOnStart)
    Call onValidate_CONTENTS__LAST_TWOFOUR(bIsOnStart)
    Call onValidate_CONTENTS__LAST_THREESIX(bIsOnStart)
End Sub

Sub Start()
    Call DoDefaults(True)
End Sub

Sub Main()
    Call DoDefaults(False)
End Sub

