        Dim iObjectInstanceCount
        
        Sub FindObjectInstanceCount(strScreenObjectName)
        	iObjectInstanceCount = 1
        
        	' strScreenObjectName is the object that is associate with this screen (if a child), or "" if the root screen.
        	If strScreenObjectName <> ""  Then
        		Dim instanceCount
        		
        		' How many instance of this object exist?
        		instanceCount = engine.count(strScreenObjectName)
        		
        		Dim i
        		for i = 1 to instanceCount
        			if engine.item(strScreenObjectName, i).item("OI").value = vAdditionalData(cAdditionalData_OIKey) then
        				iObjectInstanceCount = i
        			end if
        		next
        	End If
        End Sub

        Sub DefaultTextTo(strSourceObject, strSourceProperty, strValue, strIgnore)
        	Engine.Item(strSourceObject, iObjectInstanceCount).Item(strSourceProperty).Value = strValue
        End Sub

        
        Sub DefaultCommentTo(strSourceObject, strSourceProperty, strValue, strIgnore)
        	Engine.Item(strSourceObject, iObjectInstanceCount).Item(strSourceProperty).Value = strValue
        End Sub

        
        Sub DefaultIntegerTo(strSourceObject, strSourceProperty, strValue, strIgnore)
        	Engine.Item(strSourceObject, iObjectInstanceCount).Item(strSourceProperty).Value = CLng(strValue)
        End Sub

        
        Sub DefaultCheckboxTo(strSourceObject, strSourceProperty, strValue, strIgnore)
        	Engine.Item(strSourceObject, iObjectInstanceCount).Item(strSourceProperty).Value = CInt(strValue)
        End Sub

        
        Sub DefaultBooleanListTo(strSourceObject, strSourceProperty, strValue, strIgnore)
        	Engine.Item(strSourceObject, iObjectInstanceCount).Item(strSourceProperty).Value = CInt(strValue)
        End Sub

        
        Sub DefaultBooleanRadioTo(strSourceObject, strSourceProperty, strValue, strIgnore)
        	Engine.Item(strSourceObject, iObjectInstanceCount).Item(strSourceProperty).Value = CInt(strValue)
        End Sub

        
        Sub DefaultListTo(strSourceObject, strSourceProperty, strValue, strListCode)
        	If InStr(1, LCase(strValue), "code:", 1) = 1 Then
        		' The default value has been specified as a code (code:<thecode>).
        		Dim code
        		Dim effectiveDate
        		Dim version
        		
        		code = Mid(strValue, Len("code:")+1)
        		effectiveDate = Now()
        		version = 1
        		
        		Dim listItemId
        		listItemId = Extras.GetField(strListCode, strListCode + "_Id", code, effectiveDate, version)
        		
        		Engine.Item(strSourceObject, iObjectInstanceCount).Item(strSourceProperty).Value = CInt(listItemId)
        	Else
        		Engine.Item(strSourceObject, iObjectInstanceCount).Item(strSourceProperty).Value = CInt(strValue)
        	End If
        End Sub

        
        Sub DefaultRateListTo(strSourceObject, strSourceProperty, strValue, strListCode)
        	' TODO.
        End Sub

        
        Sub DefaultDateTo(strSourceObject, strSourceProperty, strValue, strIgnore)
        	
        	Dim location
        	Dim Interval
        	Dim Duration
        	Dim DateValue
        	
        	'Upper case the input
        	DateValue = UCase(strValue)
        	'Check to see if we want data AND  Time
        	location = InStr(1,DateValue,"DATETIME")
        	if location > 0 then
        		DateValue=  CDate(FormatDateTime(Now,0)) 'use the standard vb datetime
        	End If
        	'Check to see if TODAY is specified as a modifier
        	location  = InStr(1,DateValue,"TODAY")
        	If location > 0 Then
        		'Determine if we are adding values
        		location  = InStr(1,DateValue,"+")
        		If location > 0 Then 
        			Interval = Mid(DateValue,location + 1,1)
        			
        			If Interval = "Y" Then
        				Interval = "YYYY"
        			End If
        			
        			If Interval <> "" Then 
        				Duration  = Mid(DateValue,location + 2,Len(DateValue) - (location+1))
        				DateValue = DateAdd(Interval,Duration,CDate(FormatDateTime(Now,2)))	
        				
        			Else
        				'No Interval specified 
        				'Need an error here!!!!
        			End If	
        		Else 
        			'Check to see if we are subtracting values
        			location  =InStr(1,DateValue,"-")
        			If location > 0  Then 
        				Interval = Mid(DateValue,location + 1,1)
        				
        				If Interval <> "" Then 
        					Duration  = Mid(DateValue,location + 2,Len(DateValue) - (location+1))
        					DateValue = DateAdd(Interval, Duration * -1,CDate(FormatDateTime(Now,2)))	
        				Else
        					'No Interval specified 
        					'Need an error here!!!!
        				End If
        			Else
        				'No Function specified, so assume we are just using today's date as a shortdate
        				DateValue = CDate(FormatDateTime(Now,2))
        			End If
        			
        		End If
        		
        	End If	
        	
        	Engine.Item(strSourceObject, iObjectInstanceCount).Item(strSourceProperty).Value = CDate(DateValue)
        End Sub

        
        Sub DefaultCurrencyTo(strSourceObject, strSourceProperty, strValue, strIgnore)
        	Engine.Item(strSourceObject, iObjectInstanceCount).Item(strSourceProperty).Value = CDbl(strValue)
        End Sub

        
        Sub DefaultPercentageTo(strSourceObject, strSourceProperty, strValue, strIgnore)
        	Engine.Item(strSourceObject, iObjectInstanceCount).Item(strSourceProperty).Value = CDbl(strValue)
        End Sub

Sub WebRequired(bIsOnStart)
	If bIsOnStart = True Then
		Engine.NewObject("PSACLAIM")
		Engine.NewObject("PSACC")
	End If
End Sub

Sub onScreenLogic(bIsOnStart)
        If bIsOnStart = True Then
        		Dim x,cnt,nIndex
        		Engine.NewObject("PSACC")
        		Extras.RiskDataEngine.NewObject("PSACC")
                    '---------------------------------------------------
        		    '---START: Non-child screen properties population---	
        		    '--------------------------------------------------- 
        			   'Collect data from Policy risk
        			   Dim Death_Sum_Insured, Temp_Disab_Sum_Insured, Medical_Exp_Sum_Ins, Total_Prem,Total_Sum_Insured
                			      Death_Sum_Insured  = Extras.RiskDataEngine.Item("PSACC").Item("DEATH_SUM_INSURED").Value
                                  Temp_Disab_Sum_Insured  = Extras.RiskDataEngine.Item("PSACC").Item("TEMP_DISAB_SUM_INSURED").Value
                				  Medical_Exp_Sum_Ins  = Extras.RiskDataEngine.Item("PSACC").Item("MEDICAL_EXP_SUM_INS").Value
                                  Total_Prem  = Extras.RiskDataEngine.Item("PSACC").Item("TOTAL_PREM").Value
                			      Total_Sum_Insured  = Extras.RiskDataEngine.Item("PSACC").Item("TOTAL_SUM_INSURED").Value
        						
                				'	'Send data to the claim screen
                					Engine.Item("PSACC").Item("DEATH_SUM_INSURED").Value = Death_Sum_Insured
                					Engine.Item("PSACC").Item("TEMP_DISAB_SUM_INSURED").Value = Temp_Disab_Sum_Insured
                					Engine.Item("PSACC").Item("MEDICAL_EXP_SUM_INS").Value = Medical_Exp_Sum_Ins
                					Engine.Item("PSACC").Item("TOTAL_PREM").Value = Total_Prem
                					Engine.Item("PSACC").Item("TOTAL_SUM_INSURED").Value = Total_Sum_Insured
        							
        							
        					cnt = Extras.RiskDataEngine.Count("PSINSURED")		
        					x = 1
        					
              For nIndex = x to cnt
        	  
        	  	Engine.Item("PSACC").NewObject("PSINSURED")
        		
                             Dim Insured_person, Date_Of_Birth, Todays_Date, Diffcal, Beneficiary, Occupation, OccupationDescription
                					Insured_person  = Extras.RiskDataEngine.Item("PSINSURED",nIndex).Item("INSURED_PERSON").Value
                					Date_Of_Birth  = Extras.RiskDataEngine.Item("PSINSURED",nIndex).Item("DATE_OF_BIRTH").Value
                					Todays_Date  = Extras.RiskDataEngine.Item("PSINSURED",nIndex).Item("TODAYS_DATE").Value
                					Diffcal  = Extras.RiskDataEngine.Item("PSINSURED",nIndex).Item("DIFFCAL").Value
                					Beneficiary  = Extras.RiskDataEngine.Item("PSINSURED",nIndex).Item("BENEFICIARY").Value
                					Occupation  = Extras.RiskDataEngine.Item("PSINSURED",nIndex).Item("OCCUPATION").Value
                					OccupationDescription  = Extras.RiskDataEngine.Item("PSINSURED",nIndex).Item("OCCUPATION_DESCRIPTION").Value
        							
                					'Parent object child 
        							
                					  'Send data to the claim screen
                					Engine.Item("PSACC").Item("PSINSURED",x).Item("INSURED_PERSON").Value = Insured_person
                					Engine.Item("PSACC").Item("PSINSURED",x).Item("DATE_OF_BIRTH").Value = Date_Of_Birth
                					Engine.Item("PSACC").Item("PSINSURED",x).Item("TODAYS_DATE").Value = Todays_Date
                					Engine.Item("PSACC").Item("PSINSURED",x).Item("DIFFCAL").Value = Diffcal
                					Engine.Item("PSACC").Item("PSINSURED",x).Item("BENEFICIARY").Value = Beneficiary
                					Engine.Item("PSACC").Item("PSINSURED",x).Item("OCCUPATION").Value = Occupation
                					Engine.Item("PSACC").Item("PSINSURED",x).Item("OCCUPATION_DESCRIPTION").Value = OccupationDescription
                					
                					
                					
                		     Dim CoverDeath_Sum_Insured, CLTemp_Disab_Sum_Insured, Temporary_Dis_Per, Medical_Exp_SumInsured, Total_Pre, MaxTemp, Med_Exp_Val, TempCode, DeathSumIns, TempSI, CheckPermanentDis
                					CoverDeath_Sum_Insured  = Extras.RiskDataEngine.Item("PSINSURED",nIndex).Item("DEATH_SUM_INSURED").Value
                					CLTemp_Disab_Sum_Insured  = Extras.RiskDataEngine.Item("PSINSURED",nIndex).Item("TEMP_DISAB_SUM_INSURED").Value
                			    	Temporary_Dis_Per  = Extras.RiskDataEngine.Item("PSINSURED",nIndex).Item("TEMPORARY_DIS_PER").Value
                					Medical_Exp_SumInsured  = Extras.RiskDataEngine.Item("PSINSURED",nIndex).Item("MEDICAL_EXP_SUMINSURED").Value
                					Total_Pre  = Extras.RiskDataEngine.Item("PSINSURED",nIndex).Item("TOTAL_PRE").Value
                					MaxTemp  = Extras.RiskDataEngine.Item("PSINSURED",nIndex).Item("MAXTEMP").Value
                					Med_Exp_Val  = Extras.RiskDataEngine.Item("PSINSURED",nIndex).Item("MED_EXP_VAL").Value
                			     	TempCode  = Extras.RiskDataEngine.Item("PSINSURED",nIndex).Item("TEMPCODE").Value
                					DeathSumIns  = Extras.RiskDataEngine.Item("PSINSURED",nIndex).Item("DEATHSUMIN").Value
                				    TempSI  = Extras.RiskDataEngine.Item("PSINSURED",nIndex).Item("TEMPSI").Value
        							CheckPermanentDis =  Extras.RiskDataEngine.Item("PSINSURED",nIndex).Item("PERMANENT_DIS_CHECK").Value
                					'Send data to the claim screen
                				    Engine.Item("PSACC").Item("PSINSURED",x).Item("DEATH_SUM_INSURED").Value = CoverDeath_Sum_Insured
                					Engine.Item("PSACC").Item("PSINSURED",x).Item("TEMP_DISAB_SUM_INSURED").Value = CLTemp_Disab_Sum_Insured
                					Engine.Item("PSACC").Item("PSINSURED",x).Item("TEMPORARY_DIS_PER").Value = Temporary_Dis_Per
                				    Engine.Item("PSACC").Item("PSINSURED",x).Item("MEDICAL_EXP_SUMINSURED").Value = Medical_Exp_SumInsured
                				    Engine.Item("PSACC").Item("PSINSURED",x).Item("TOTAL_PRE").Value = Total_Pre
                					Engine.Item("PSACC").Item("PSINSURED",x).Item("MAXTEMP").Value = MaxTemp
                					Engine.Item("PSACC").Item("PSINSURED",x).Item("MED_EXP_VAL").Value = Med_Exp_Val
                					Engine.Item("PSACC").Item("PSINSURED",x).Item("TEMPCODE").Value = TempCode
                					Engine.Item("PSACC").Item("PSINSURED",x).Item("DEATHSUMIN").Value = DeathSumIns
                					Engine.Item("PSACC").Item("PSINSURED",x).Item("TEMPSI").Value = TempSI
        							Engine.Item("PSACC").Item("PSINSURED",x).Item("PERMANENT_DIS_CHECK").Value = CheckPermanentDis
                						
        						  
        	x = x + 1
        	Next
        			   
        		Call DoInstanceCount
        	End If
        End Sub

        
        Sub DoInstanceCount
        ' The ScreenMain rule is added to every screen automatically.
        
        
        Call FindObjectInstanceCount("")
End Sub

Sub onValidate_PSACLAIM__THIRDPARTY(bIsOnStart)
        If bIsOnStart = True Then
        	Call DefaultCheckboxTo("PSACLAIM", "THIRDPARTY", "0", "{listcode}")
        End If
End Sub

Sub onValidate_PSACLAIM__SALVAGE(bIsOnStart)
        If bIsOnStart = True Then
        	Call DefaultCheckboxTo("PSACLAIM", "SALVAGE", "0", "{listcode}")
        End If
End Sub

Sub onValidate_PSACLAIM__IS_THRDTLS(bIsOnStart)
        If bIsOnStart = True Then
        	Call DefaultCheckboxTo("PSACLAIM", "IS_THRDTLS", "0", "{listcode}")
        End If
End Sub

Sub onValidate_PSACLAIM__IS_SPM(bIsOnStart)
        If bIsOnStart = True Then
        	Call DefaultCheckboxTo("PSACLAIM", "IS_SPM", "0", "{listcode}")
        End If
End Sub

Sub onValidate_PSACLAIM__IS_NAMAPP(bIsOnStart)
        If bIsOnStart = True Then
        	Call DefaultCheckboxTo("PSACLAIM", "IS_NAMAPP", "0", "{listcode}")
        End If
End Sub

Sub DoDefaults(bIsOnStart)
    Call WebRequired(bIsOnStart)
    Call onScreenLogic(bIsOnStart)
    Call onValidate_PSACLAIM__THIRDPARTY(bIsOnStart)
    Call onValidate_PSACLAIM__SALVAGE(bIsOnStart)
    Call onValidate_PSACLAIM__IS_THRDTLS(bIsOnStart)
    Call onValidate_PSACLAIM__IS_SPM(bIsOnStart)
    Call onValidate_PSACLAIM__IS_NAMAPP(bIsOnStart)
End Sub

Sub Start()
    Call DoDefaults(True)
End Sub

Sub Main()
    Call DoDefaults(False)
End Sub

