        '**********************************************************************************************
        'Load Defaults from UDLs
        '**********************************************************************************************
        Sub GetClaimUserLevel()
         Dim vResult
         Dim sSQL 
         Dim iUserName
         Dim UserAuthorityGroup
         iUserName = Extras.Username
        	
        	sSQL = "SELECT usergroup FROM UDL_CLAIM_UGA WHERE code = '" & iUserName & "'" 	
        	Call Extras.CallNamedStoredProcedure(4033, "RetrieveData", vResult, Array("sSQL", sSQL))
        		
        	If IsArray(vResult) Then
        			UserAuthorityGroup = vResult(0, 0)
        	End If
        	
        	'Assign Defaults Claim User Group Value
        	With Engine.Item("GENERAL")
        		'Extras.Username Extras.GetField("UDL_CLAIM_UGA", "usergroup", Extras.Username,Extras.CoverStartDate)
        		.Item("UserGroup").Value = UserAuthorityGroup 
        		
        		If (.Item("SALVAGESTAT").Value ="") Or IsNull(.Item("SALVAGESTAT").Value) Then
                    .Item("SALVAGESTAT").Value = 1
                End If 
        		
        		If (.Item("LEGALSTAT").Value ="") Or IsNull(.Item("LEGALSTAT").Value) Then
                    .Item("LEGALSTAT").Value = 15
                End If
        		
        		If (.Item("CLMDECISION").Value ="") Or IsNull(.Item("CLMDECISION").Value) Then
                    .Item("CLMDECISION").Value = 5
                End If
        		
        		
        	End With
        	
        End Sub

        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        Sub PullFromGeneral()
        			Dim nIndex, Cnt
                
                	Extras.RiskDataEngine.NewObject("RTARSK")
                	Extras.RiskDataEngine.NewObject("ADDRESS")
                	Extras.RiskDataEngine.NewObject("RTACLM")
                	
                	Engine.Item("RTACLM").Item("RISK_ATTACH_DATE").Value = Extras.RiskDataEngine.Item("RTARSK").Item("RISK_ATTACH_DATE").Value
                	Engine.Item("RTACLM").Item("EFFECTIVEDATE").Value = Extras.RiskDataEngine.Item("RTARSK").Item("EFFECTIVEDATE").Value
                	Engine.Item("RTACLM").Item("DESCRIPTION").Value  = Extras.RiskDataEngine.Item("RTARSK").Item("DESCRIPTION").Value
        			
                	Engine.Item("ADDRESS").Item("ADDRESSLIST").Value  = Extras.RiskDataEngine.Item("ADDRESS").Item("ADDRESSLIST").Value
                	Engine.Item("ADDRESS").Item("SITEADDRESSLIST").Value  = Extras.RiskDataEngine.Item("ADDRESS").Item("SITEADDRESSLIST").Value
                	Engine.Item("ADDRESS").Item("HOMEADDRESSLIST").Value  = Extras.RiskDataEngine.Item("ADDRESS").Item("HOMEADDRESSLIST").Value
                	Engine.Item("ADDRESS").Item("B_ADDRESSLIST").Value  = Extras.RiskDataEngine.Item("ADDRESS").Item("B_ADDRESSLIST").Value
                	Engine.Item("ADDRESS").Item("LINE1").Value  = Extras.RiskDataEngine.Item("ADDRESS").Item("LINE1").Value
                	Engine.Item("ADDRESS").Item("SUBURB").Value  = Extras.RiskDataEngine.Item("ADDRESS").Item("SUBURB").Value
                	Engine.Item("ADDRESS").Item("TOWN").Value  = Extras.RiskDataEngine.Item("ADDRESS").Item("TOWN").Value
                	Engine.Item("ADDRESS").Item("POSTCODE").Value  = Extras.RiskDataEngine.Item("ADDRESS").Item("POSTCODE").Value
                	Engine.Item("ADDRESS").Item("REGION").Value  = Extras.RiskDataEngine.Item("ADDRESS").Item("REGION").Value
                	Engine.Item("ADDRESS").Item("COUNTRY").Value  = Extras.RiskDataEngine.Item("ADDRESS").Item("COUNTRY").Value
                	
        			nIndex = Extras.RiskDataEngine.Item("RTARSK").Count("RTA_ENDORSE")
                	For Cnt = 1 To nIndex
                		Engine.Item("RTACLM").NewObject("RTA_ENDORSE")			
                		Engine.Item("RTACLM").Item("RTA_ENDORSE", Cnt).Item("ENDORSE_CAP").Value = Extras.RiskDataEngine.Item("RTARSK").Item("RTA_ENDORSE", Cnt).Item("ENDORSE_CAP").Value		
                	Next
        				
                	nIndex = Extras.RiskDataEngine.Item("RTARSK").Count("CNOTE_DETAILS")
                	For Cnt = 1 To nIndex
                		Engine.Item("RTACLM").NewObject("CNOTE_DETAILS")			
                		Engine.Item("RTACLM").Item("CNOTE_DETAILS", Cnt).Item("DATE_CREATED").Value = Extras.RiskDataEngine.Item("RTARSK").Item("CNOTE_DETAILS", Cnt).Item("DATE_CREATED").Value		
                		Engine.Item("RTACLM").Item("CNOTE_DETAILS", Cnt).Item("CREATED_BY").Value = Extras.RiskDataEngine.Item("RTARSK").Item("CNOTE_DETAILS", Cnt).Item("CREATED_BY").Value		
                		Engine.Item("RTACLM").Item("CNOTE_DETAILS", Cnt).Item("COVER_TYPE").Value = Extras.RiskDataEngine.Item("RTARSK").Item("CNOTE_DETAILS", Cnt).Item("COVER_TYPE").Value		
                		Engine.Item("RTACLM").Item("CNOTE_DETAILS", Cnt).Item("NOTE_DESCRIPTION").Value = Extras.RiskDataEngine.Item("RTARSK").Item("CNOTE_DETAILS", Cnt).Item("NOTE_DESCRIPTION").Value		
                		Engine.Item("RTACLM").Item("CNOTE_DETAILS", Cnt).Item("NOTE_DETAILS").Value = Extras.RiskDataEngine.Item("RTARSK").Item("CNOTE_DETAILS", Cnt).Item("NOTE_DETAILS").Value		
                	Next
                	
                	nIndex = Extras.RiskDataEngine.Item("RTARSK").Count("SNOTE_DETAILS")
                	For Cnt = 1 To nIndex
                		Engine.Item("RTACLM").NewObject("SNOTE_DETAILS")			
                		Engine.Item("RTACLM").Item("SNOTE_DETAILS", Cnt).Item("DATE_CREATED").Value = Extras.RiskDataEngine.Item("RTARSK").Item("SNOTE_DETAILS", Cnt).Item("DATE_CREATED").Value		
                		Engine.Item("RTACLM").Item("SNOTE_DETAILS", Cnt).Item("CREATED_BY").Value = Extras.RiskDataEngine.Item("RTARSK").Item("SNOTE_DETAILS", Cnt).Item("CREATED_BY").Value		
                		Engine.Item("RTACLM").Item("SNOTE_DETAILS", Cnt).Item("COVER_TYPE").Value = Extras.RiskDataEngine.Item("RTARSK").Item("SNOTE_DETAILS", Cnt).Item("COVER_TYPE").Value		
                		Engine.Item("RTACLM").Item("SNOTE_DETAILS", Cnt).Item("NOTE_DESCRIPTION").Value = Extras.RiskDataEngine.Item("RTARSK").Item("SNOTE_DETAILS", Cnt).Item("NOTE_DESCRIPTION").Value		
                		Engine.Item("RTACLM").Item("SNOTE_DETAILS", Cnt).Item("NOTE_DETAILS").Value = Extras.RiskDataEngine.Item("RTARSK").Item("SNOTE_DETAILS", Cnt).Item("NOTE_DETAILS").Value		
                	Next
                	
                End Sub

        Dim iObjectInstanceCount
        
        Sub FindObjectInstanceCount(strScreenObjectName)
        	iObjectInstanceCount = 1
        
        	' strScreenObjectName is the object that is associate with this screen (if a child), or "" if the root screen.
        	If strScreenObjectName <> ""  Then
        		Dim instanceCount
        		
        		' How many instance of this object exist?
        		instanceCount = engine.count(strScreenObjectName)
        		
        		Dim i
        		for i = 1 to instanceCount
        			if engine.item(strScreenObjectName, i).item("OI").value = vAdditionalData(cAdditionalData_OIKey) then
        				iObjectInstanceCount = i
        			end if
        		next
        	End If
        End Sub

        Sub DefaultTextTo(strSourceObject, strSourceProperty, strValue, strIgnore)
        	Engine.Item(strSourceObject, iObjectInstanceCount).Item(strSourceProperty).Value = strValue
        End Sub

        
        Sub DefaultCommentTo(strSourceObject, strSourceProperty, strValue, strIgnore)
        	Engine.Item(strSourceObject, iObjectInstanceCount).Item(strSourceProperty).Value = strValue
        End Sub

        
        Sub DefaultIntegerTo(strSourceObject, strSourceProperty, strValue, strIgnore)
        	Engine.Item(strSourceObject, iObjectInstanceCount).Item(strSourceProperty).Value = CLng(strValue)
        End Sub

        
        Sub DefaultCheckboxTo(strSourceObject, strSourceProperty, strValue, strIgnore)
        	Engine.Item(strSourceObject, iObjectInstanceCount).Item(strSourceProperty).Value = CInt(strValue)
        End Sub

        
        Sub DefaultBooleanListTo(strSourceObject, strSourceProperty, strValue, strIgnore)
        	Engine.Item(strSourceObject, iObjectInstanceCount).Item(strSourceProperty).Value = CInt(strValue)
        End Sub

        
        Sub DefaultBooleanRadioTo(strSourceObject, strSourceProperty, strValue, strIgnore)
        	Engine.Item(strSourceObject, iObjectInstanceCount).Item(strSourceProperty).Value = CInt(strValue)
        End Sub

        
        Sub DefaultListTo(strSourceObject, strSourceProperty, strValue, strListCode)
        	If InStr(1, LCase(strValue), "code:", 1) = 1 Then
        		' The default value has been specified as a code (code:<thecode>).
        		Dim code
        		Dim effectiveDate
        		Dim version
        		
        		code = Mid(strValue, Len("code:")+1)
        		effectiveDate = Now()
        		version = 1
        		
        		Dim listItemId
        		listItemId = Extras.GetField(strListCode, strListCode + "_Id", code, effectiveDate, version)
        		
        		Engine.Item(strSourceObject, iObjectInstanceCount).Item(strSourceProperty).Value = CInt(listItemId)
        	Else
        		Engine.Item(strSourceObject, iObjectInstanceCount).Item(strSourceProperty).Value = CInt(strValue)
        	End If
        End Sub

        
        Sub DefaultRateListTo(strSourceObject, strSourceProperty, strValue, strListCode)
        	' TODO.
        End Sub

        
        Sub DefaultDateTo(strSourceObject, strSourceProperty, strValue, strIgnore)
        	
        	Dim location
        	Dim Interval
        	Dim Duration
        	Dim DateValue
        	
        	'Upper case the input
        	DateValue = UCase(strValue)
        	'Check to see if we want data AND  Time
        	location = InStr(1,DateValue,"DATETIME")
        	if location > 0 then
        		DateValue=  CDate(FormatDateTime(Now,0)) 'use the standard vb datetime
        	End If
        	'Check to see if TODAY is specified as a modifier
        	location  = InStr(1,DateValue,"TODAY")
        	If location > 0 Then
        		'Determine if we are adding values
        		location  = InStr(1,DateValue,"+")
        		If location > 0 Then 
        			Interval = Mid(DateValue,location + 1,1)
        			
        			If Interval = "Y" Then
        				Interval = "YYYY"
        			End If
        			
        			If Interval <> "" Then 
        				Duration  = Mid(DateValue,location + 2,Len(DateValue) - (location+1))
        				DateValue = DateAdd(Interval,Duration,CDate(FormatDateTime(Now,2)))	
        				
        			Else
        				'No Interval specified 
        				'Need an error here!!!!
        			End If	
        		Else 
        			'Check to see if we are subtracting values
        			location  =InStr(1,DateValue,"-")
        			If location > 0  Then 
        				Interval = Mid(DateValue,location + 1,1)
        				
        				If Interval <> "" Then 
        					Duration  = Mid(DateValue,location + 2,Len(DateValue) - (location+1))
        					DateValue = DateAdd(Interval, Duration * -1,CDate(FormatDateTime(Now,2)))	
        				Else
        					'No Interval specified 
        					'Need an error here!!!!
        				End If
        			Else
        				'No Function specified, so assume we are just using today's date as a shortdate
        				DateValue = CDate(FormatDateTime(Now,2))
        			End If
        			
        		End If
        		
        	End If	
        	
        	Engine.Item(strSourceObject, iObjectInstanceCount).Item(strSourceProperty).Value = CDate(DateValue)
        End Sub

        
        Sub DefaultCurrencyTo(strSourceObject, strSourceProperty, strValue, strIgnore)
        	Engine.Item(strSourceObject, iObjectInstanceCount).Item(strSourceProperty).Value = CDbl(strValue)
        End Sub

        
        Sub DefaultPercentageTo(strSourceObject, strSourceProperty, strValue, strIgnore)
        	Engine.Item(strSourceObject, iObjectInstanceCount).Item(strSourceProperty).Value = CDbl(strValue)
        End Sub

Sub WebRequired(bIsOnStart)
	If bIsOnStart = True Then
		Engine.NewObject("RTACLM")
		Engine.NewObject("GENERAL")
		Engine.NewObject("ADDRESS")
	End If
End Sub

Sub onScreenLogic(bIsOnStart)
        
         If bIsOnStart = True Or bIsOnStart = False Then
        	Call GetClaimUserLevel()
        End If
        
         
        
        
        	If bIsOnStart = True Then
        	
        		Call PullFromGeneral()
        
        		Call DoInstanceCount
        	End If
        End Sub

        
        Sub DoInstanceCount
        ' The ScreenMain rule is added to every screen automatically.
        
        
        Call FindObjectInstanceCount("")
End Sub

Sub onValidate_GENERAL__THIRDPARTY(bIsOnStart)
        If bIsOnStart = True Then
        	Call DefaultCheckboxTo("GENERAL", "THIRDPARTY", "0", "{listcode}")
        End If
End Sub

Sub onValidate_GENERAL__SALVAGE(bIsOnStart)
        If bIsOnStart = True Then
        	Call DefaultCheckboxTo("GENERAL", "SALVAGE", "0", "{listcode}")
        End If
End Sub

Sub onValidate_GENERAL__RECOVERY(bIsOnStart)
        If bIsOnStart = True Then
        	Call DefaultCheckboxTo("GENERAL", "RECOVERY", "0", "{listcode}")
        End If
End Sub

Sub onValidate_GENERAL__IS_SPM(bIsOnStart)
        If bIsOnStart = True Then
        	Call DefaultCheckboxTo("GENERAL", "IS_SPM", "0", "{listcode}")
        End If
End Sub

Sub onValidate_GENERAL__IS_THRDTLS(bIsOnStart)
        If bIsOnStart = True Then
        	Call DefaultCheckboxTo("GENERAL", "IS_THRDTLS", "0", "{listcode}")
        End If
End Sub

Sub onValidate_GENERAL__IS_NAMAPP(bIsOnStart)
        If bIsOnStart = True Then
        	Call DefaultCheckboxTo("GENERAL", "IS_NAMAPP", "0", "{listcode}")
        End If
End Sub

Sub onValidate_RTACLM__FAP(bIsOnStart)
        If bIsOnStart = True Then
        	Call DefaultTextTo("RTACLM", "FAP", "500", "{listcode}")
        End If
End Sub

Sub DoDefaults(bIsOnStart)
    Call WebRequired(bIsOnStart)
    Call onScreenLogic(bIsOnStart)
    Call onValidate_GENERAL__THIRDPARTY(bIsOnStart)
    Call onValidate_GENERAL__SALVAGE(bIsOnStart)
    Call onValidate_GENERAL__RECOVERY(bIsOnStart)
    Call onValidate_GENERAL__IS_SPM(bIsOnStart)
    Call onValidate_GENERAL__IS_THRDTLS(bIsOnStart)
    Call onValidate_GENERAL__IS_NAMAPP(bIsOnStart)
    Call onValidate_RTACLM__FAP(bIsOnStart)
End Sub

Sub Start()
    Call DoDefaults(True)
End Sub

Sub Main()
    Call DoDefaults(False)
End Sub

