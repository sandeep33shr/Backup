        '**********************************************************************************************
        'Load Defaults from UDLs
        '**********************************************************************************************
        Sub GetClaimUserLevel()
         Dim vResult
         Dim sSQL 
         Dim iUserName
         Dim UserAuthorityGroup
         iUserName = Extras.Username
        	
        	sSQL = "SELECT usergroup FROM UDL_CLAIM_UGA WHERE code = '" & iUserName & "'" 	
        	Call Extras.CallNamedStoredProcedure(4033, "RetrieveData", vResult, Array("sSQL", sSQL))
        		
        	If IsArray(vResult) Then
        			UserAuthorityGroup = vResult(0, 0)
        	End If
        	
        	'Assign Defaults Claim User Group Value
        	With Engine.Item("GENERAL")
        		'Extras.Username Extras.GetField("UDL_CLAIM_UGA", "usergroup", Extras.Username,Extras.CoverStartDate)
        		.Item("UserGroup").Value = UserAuthorityGroup 
        		
        		If (.Item("SALVAGESTAT").Value ="") Or IsNull(.Item("SALVAGESTAT").Value) Then
                    .Item("SALVAGESTAT").Value = 1
                End If 
        		
        		If (.Item("LEGALSTAT").Value ="") Or IsNull(.Item("LEGALSTAT").Value) Then
                    .Item("LEGALSTAT").Value = 15
                End If
        		
        		If (.Item("CLMDECISION").Value ="") Or IsNull(.Item("CLMDECISION").Value) Then
                    .Item("CLMDECISION").Value = 5
                End If
        		
        		
        	End With
        	
        End Sub

        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
                Sub PullFromRisk()
        
                	
                		Dim primIndustry, secIndustry, tertIndustry, industry
        				Dim att_date, eff_date
        				Dim nameVessel, craftType, motorType, useType, vUse
        				Dim SumInsured, fap,minAmt
        				Dim isNasria, nasriaLimit
        				Dim intpartyName, intpartyDate
        				Dim stCount, stTotalCount, ttTotalCount, ttCount, TotCnt, index
        				
                				
                		'Collect data from Policy risk
        				
                		att_date = Extras.RiskDataEngine.Item("WC_GENERAL").Item("RISKATTACHDATE").Value
                		eff_date = Extras.RiskDataEngine.Item("WC_GENERAL").Item("EFFECTIVEDATE").Value
        				
        				'---------------Address---------------'
        				Dim RiskObject, ClaimObject
                		RiskObject = "ADDRESS"
                		ClaimObject = "ADDRESS"
                		Call ToClaim(RiskObject,ClaimObject,"ADDRESSLIST")
                		Call ToClaim(RiskObject,ClaimObject,"LINE1")
                		Call ToClaim(RiskObject,ClaimObject,"SUBURB")
                		Call ToClaim(RiskObject,ClaimObject,"TOWN")
                		Call ToClaim(RiskObject,ClaimObject,"POSTCODE")
                		Call ToClaim(RiskObject,ClaimObject,"REGION")
                		Call ToClaim(RiskObject,ClaimObject,"COUNTRY")
        				
        				RiskObject = "WC_GENERAL"
                		ClaimObject = "WC_GENERAL"
                		Call ToClaim(RiskObject,ClaimObject,"IS_VAT")
         
                		primIndustry = Extras.RiskDataEngine.Item("WC_GENERAL").Item("PRIMARY_INDUSTRY").Value
        				secIndustry = Extras.RiskDataEngine.Item("WC_GENERAL").Item("SECOND_INDUSTRY").Value		
                		tertIndustry = Extras.RiskDataEngine.Item("WC_GENERAL").Item("TERTIARY_INDUSTRY").Value
        				industry = Extras.RiskDataEngine.Item("WC_GENERAL").Item("INDUSTRY").Value
              
        				nameVessel = Extras.RiskDataEngine.Item("WC_VESSELS").Item("NVESSEL").Value		
                		craftType = Extras.RiskDataEngine.Item("WC_VESSELS").Item("VRAFT_TYPE").Value
        				motorType = Extras.RiskDataEngine.Item("WC_VESSELS").Item("TVMOTOR").Value		
                		useType = Extras.RiskDataEngine.Item("WC_VESSELS").Item("TYPE_USE").Value
        				vUse = Extras.RiskDataEngine.Item("WC_VESSELS").Item("VUSE").Value
        	  
                		SumInsured = Extras.RiskDataEngine.Item("WC_VESSELS").Item("SUMINSURED").Value		
                		fap = Extras.RiskDataEngine.Item("WC_VESSELS").Item("FAP_PERC").Value
        				minAmt = Extras.RiskDataEngine.Item("WC_VESSELS").Item("MIN_AMNT").Value		
                		
                		
        				
        				isNasria = Extras.RiskDataEngine.Item("WC_VESSELS").Item("IS_NASRIA").Value		
                		nasriaLimit = Extras.RiskDataEngine.Item("WC_VESSELS").Item("NASRIA_LIMIT").Value
        				
        				
        				intpartyName = Extras.RiskDataEngine.Item("WC_VESSELS").Item("INTPARTY_NAME").Value		
                		intpartyDate = Extras.RiskDataEngine.Item("WC_VESSELS").Item("INTPARTY_DATE").Value
        				
        				
        				
                		'Send data to the claim screen
        				
        				
                		
                		Engine.Item("WC_GENERAL").Item("ATTACHMENTDATE").Value = att_date
                		Engine.Item("WC_GENERAL").Item("EFFECTIVEDATE").Value = eff_date
                		
                		Engine.Item("WC_GENERAL").Item("PRIMARY_INDUSTRY").Value = primIndustry	
        				Engine.Item("WC_GENERAL").Item("SECOND_INDUSTRY").Value = secIndustry
                		Engine.Item("WC_GENERAL").Item("TERTIARY_INDUSTRY").Value = tertIndustry
                		Engine.Item("WC_GENERAL").Item("INDUSTRY").Value = industry
        				
                		Engine.Item("WC_VESSELS").Item("NVESSEL").Value = nameVessel
        				Engine.Item("WC_VESSELS").Item("VRAFT_TYPE").Value = craftType
                		Engine.Item("WC_VESSELS").Item("TVMOTOR").Value = motorType
                		Engine.Item("WC_VESSELS").Item("TYPE_USE").Value = useType
        				Engine.Item("WC_VESSELS").Item("VUSE").Value = vUse
        				
        				Engine.Item("WC_VESSELS").Item("SUMINSURED").Value = SumInsured
                		Engine.Item("WC_VESSELS").Item("FAP_PERC").Value = fap
                		Engine.Item("WC_VESSELS").Item("MIN_AMNT").Value = minAmt
        			
        				Engine.Item("WC_VESSELS").Item("IS_NASRIA").Value = isNasria
        				Engine.Item("WC_VESSELS").Item("NASRIA_LIMIT").Value = nasriaLimit
        				
        				Engine.Item("WC_VESSELS").Item("INTPARTY_NAME").Value = intpartyName
        				Engine.Item("WC_VESSELS").Item("INTPARTY_DATE").Value = intpartyDate
        				
        							'---------------Endorsement---------------'
        				
        				
        				TotCnt = Extras.RiskDataEngine.Item("WC_REFERRAL_CLAUSES").Count("WC_CLAUSEPREM")
        				
        				For index = 1 To TotCnt
        				
        					Engine.Item("WC_VESSELS").NewObject("WC_CLAUSEPREM")		
        					
        					Engine.Item("WC_VESSELS").Item("WC_CLAUSEPREM", index).Item("ENDORSE_CAP").Value = Extras.RiskDataEngine.Item("WC_REFERRAL_CLAUSES").Item("WC_CLAUSEPREM", index).Item("ENDORSE_CAP").Value
        					
        				Next
        				
        				
        					'WC Notes(Not printed)
        				
        				ttTotalCount = Extras.RiskDataEngine.Item("WC_NOTES").Count("WC_CNOTE_DETAILS")
        				
        				For ttCount = 1 To ttTotalCount
        					Engine.Item("WC_VESSELS").NewObject("WC_CNOTE_DETAILS")		
        					
        					Engine.Item("WC_VESSELS").Item("WC_CNOTE_DETAILS", ttCount).Item("DATE_CREATED").Value = Extras.RiskDataEngine.Item("WC_NOTES").Item("WC_CNOTE_DETAILS", ttCount).Item("DATE_CREATED").Value
        					
        					Engine.Item("WC_VESSELS").Item("WC_CNOTE_DETAILS", ttCount).Item("CREATED_BY").Value = Extras.RiskDataEngine.Item("WC_NOTES").Item("WC_CNOTE_DETAILS", ttCount).Item("CREATED_BY").Value		
        
        					Engine.Item("WC_VESSELS").Item("WC_CNOTE_DETAILS", ttCount).Item("Risk_Cover").Value = Extras.RiskDataEngine.Item("WC_NOTES").Item("WC_CNOTE_DETAILS", ttCount).Item("Risk_Cover").Value		
        				
        					Engine.Item("WC_VESSELS").Item("WC_CNOTE_DETAILS", ttCount).Item("Note_Subject").Value = Extras.RiskDataEngine.Item("WC_NOTES").Item("WC_CNOTE_DETAILS", ttCount).Item("Note_Subject").Value
        					
        					Engine.Item("WC_VESSELS").Item("WC_CNOTE_DETAILS", ttCount).Item("NOTE_DETAILS").Value = Extras.RiskDataEngine.Item("WC_NOTES").Item("WC_CNOTE_DETAILS", ttCount).Item("NOTE_DETAILS").Value		
        				Next
        				
        				'WC Notes(printed)
        				
        				stTotalCount = Extras.RiskDataEngine.Item("WC_NOTES").Count("WC_SCNOTE_DETAILS")
        				
        				For stCount = 1 To stTotalCount
        					Engine.Item("WC_VESSELS").NewObject("WC_SCNOTE_DETAILS")		
        					
        					Engine.Item("WC_VESSELS").Item("WC_SCNOTE_DETAILS", stCount).Item("DATE_CREATED").Value = Extras.RiskDataEngine.Item("WC_NOTES").Item("WC_SCNOTE_DETAILS", stCount).Item("DATE_CREATED").Value
        					
        					Engine.Item("WC_VESSELS").Item("WC_SCNOTE_DETAILS", stCount).Item("CREATED_BY").Value = Extras.RiskDataEngine.Item("WC_NOTES").Item("WC_SCNOTE_DETAILS", stCount).Item("CREATED_BY").Value		
        
        					Engine.Item("WC_VESSELS").Item("WC_SCNOTE_DETAILS", stCount).Item("Risk_Cover").Value = Extras.RiskDataEngine.Item("WC_NOTES").Item("WC_SCNOTE_DETAILS", stCount).Item("Risk_Cover").Value		
        
        					Engine.Item("WC_VESSELS").Item("WC_SCNOTE_DETAILS", stCount).Item("Note_Subject").Value = Extras.RiskDataEngine.Item("WC_NOTES").Item("WC_SCNOTE_DETAILS", stCount).Item("Note_Subject").Value
        					
        					Engine.Item("WC_VESSELS").Item("WC_SCNOTE_DETAILS", stCount).Item("NOTE_DETAILS").Value = Extras.RiskDataEngine.Item("WC_NOTES").Item("WC_SCNOTE_DETAILS", stCount).Item("NOTE_DETAILS").Value		
        				Next
        				
                		
                End Sub

        
                
             Function ToClaim(RObject, CObject, PropName)
                	Dim Val	
                	Val = Extras.RiskDataEngine.Item(RObject).Item(PropName).Value
                	Engine.Item(CObject).Item(PropName).Value = Val
                End Function
        Dim iObjectInstanceCount
        
        Sub FindObjectInstanceCount(strScreenObjectName)
        	iObjectInstanceCount = 1
        
        	' strScreenObjectName is the object that is associate with this screen (if a child), or "" if the root screen.
        	If strScreenObjectName <> ""  Then
        		Dim instanceCount
        		
        		' How many instance of this object exist?
        		instanceCount = engine.count(strScreenObjectName)
        		
        		Dim i
        		for i = 1 to instanceCount
        			if engine.item(strScreenObjectName, i).item("OI").value = vAdditionalData(cAdditionalData_OIKey) then
        				iObjectInstanceCount = i
        			end if
        		next
        	End If
        End Sub

        Sub DefaultTextTo(strSourceObject, strSourceProperty, strValue, strIgnore)
        	Engine.Item(strSourceObject, iObjectInstanceCount).Item(strSourceProperty).Value = strValue
        End Sub

        
        Sub DefaultCommentTo(strSourceObject, strSourceProperty, strValue, strIgnore)
        	Engine.Item(strSourceObject, iObjectInstanceCount).Item(strSourceProperty).Value = strValue
        End Sub

        
        Sub DefaultIntegerTo(strSourceObject, strSourceProperty, strValue, strIgnore)
        	Engine.Item(strSourceObject, iObjectInstanceCount).Item(strSourceProperty).Value = CLng(strValue)
        End Sub

        
        Sub DefaultCheckboxTo(strSourceObject, strSourceProperty, strValue, strIgnore)
        	Engine.Item(strSourceObject, iObjectInstanceCount).Item(strSourceProperty).Value = CInt(strValue)
        End Sub

        
        Sub DefaultBooleanListTo(strSourceObject, strSourceProperty, strValue, strIgnore)
        	Engine.Item(strSourceObject, iObjectInstanceCount).Item(strSourceProperty).Value = CInt(strValue)
        End Sub

        
        Sub DefaultBooleanRadioTo(strSourceObject, strSourceProperty, strValue, strIgnore)
        	Engine.Item(strSourceObject, iObjectInstanceCount).Item(strSourceProperty).Value = CInt(strValue)
        End Sub

        
        Sub DefaultListTo(strSourceObject, strSourceProperty, strValue, strListCode)
        	If InStr(1, LCase(strValue), "code:", 1) = 1 Then
        		' The default value has been specified as a code (code:<thecode>).
        		Dim code
        		Dim effectiveDate
        		Dim version
        		
        		code = Mid(strValue, Len("code:")+1)
        		effectiveDate = Now()
        		version = 1
        		
        		Dim listItemId
        		listItemId = Extras.GetField(strListCode, strListCode + "_Id", code, effectiveDate, version)
        		
        		Engine.Item(strSourceObject, iObjectInstanceCount).Item(strSourceProperty).Value = CInt(listItemId)
        	Else
        		Engine.Item(strSourceObject, iObjectInstanceCount).Item(strSourceProperty).Value = CInt(strValue)
        	End If
        End Sub

        
        Sub DefaultRateListTo(strSourceObject, strSourceProperty, strValue, strListCode)
        	' TODO.
        End Sub

        
        Sub DefaultDateTo(strSourceObject, strSourceProperty, strValue, strIgnore)
        	
        	Dim location
        	Dim Interval
        	Dim Duration
        	Dim DateValue
        	
        	'Upper case the input
        	DateValue = UCase(strValue)
        	'Check to see if we want data AND  Time
        	location = InStr(1,DateValue,"DATETIME")
        	if location > 0 then
        		DateValue=  CDate(FormatDateTime(Now,0)) 'use the standard vb datetime
        	End If
        	'Check to see if TODAY is specified as a modifier
        	location  = InStr(1,DateValue,"TODAY")
        	If location > 0 Then
        		'Determine if we are adding values
        		location  = InStr(1,DateValue,"+")
        		If location > 0 Then 
        			Interval = Mid(DateValue,location + 1,1)
        			
        			If Interval = "Y" Then
        				Interval = "YYYY"
        			End If
        			
        			If Interval <> "" Then 
        				Duration  = Mid(DateValue,location + 2,Len(DateValue) - (location+1))
        				DateValue = DateAdd(Interval,Duration,CDate(FormatDateTime(Now,2)))	
        				
        			Else
        				'No Interval specified 
        				'Need an error here!!!!
        			End If	
        		Else 
        			'Check to see if we are subtracting values
        			location  =InStr(1,DateValue,"-")
        			If location > 0  Then 
        				Interval = Mid(DateValue,location + 1,1)
        				
        				If Interval <> "" Then 
        					Duration  = Mid(DateValue,location + 2,Len(DateValue) - (location+1))
        					DateValue = DateAdd(Interval, Duration * -1,CDate(FormatDateTime(Now,2)))	
        				Else
        					'No Interval specified 
        					'Need an error here!!!!
        				End If
        			Else
        				'No Function specified, so assume we are just using today's date as a shortdate
        				DateValue = CDate(FormatDateTime(Now,2))
        			End If
        			
        		End If
        		
        	End If	
        	
        	Engine.Item(strSourceObject, iObjectInstanceCount).Item(strSourceProperty).Value = CDate(DateValue)
        End Sub

        
        Sub DefaultCurrencyTo(strSourceObject, strSourceProperty, strValue, strIgnore)
        	Engine.Item(strSourceObject, iObjectInstanceCount).Item(strSourceProperty).Value = CDbl(strValue)
        End Sub

        
        Sub DefaultPercentageTo(strSourceObject, strSourceProperty, strValue, strIgnore)
        	Engine.Item(strSourceObject, iObjectInstanceCount).Item(strSourceProperty).Value = CDbl(strValue)
        End Sub

Sub WebRequired(bIsOnStart)
	If bIsOnStart = True Then
		Engine.NewObject("GENERAL")
		Engine.NewObject("CWCLAIM")
		Engine.NewObject("WC_GENERAL")
		Engine.NewObject("ADDRESS")
		Engine.NewObject("WC_VESSELS")
	End If
End Sub

Sub onScreenLogic(bIsOnStart)
        
         If bIsOnStart = True Or bIsOnStart = False Then
        	Call GetClaimUserLevel()
        End If
        
         
        
        If bIsOnStart = True Then
        
        call PullFromRisk()
        
        End If
        ' The ScreenMain rule is added to every screen automatically.
        
        
        Call FindObjectInstanceCount("")
End Sub

Sub onValidate_CWCLAIM__THIRDPARTY(bIsOnStart)
        If bIsOnStart = True Then
        	Call DefaultCheckboxTo("CWCLAIM", "THIRDPARTY", "0", "{listcode}")
        End If
End Sub

Sub onValidate_CWCLAIM__SALVAGE(bIsOnStart)
        If bIsOnStart = True Then
        	Call DefaultCheckboxTo("CWCLAIM", "SALVAGE", "0", "{listcode}")
        End If
End Sub

Sub onValidate_CWCLAIM__RECOVERY(bIsOnStart)
        If bIsOnStart = True Then
        	Call DefaultCheckboxTo("CWCLAIM", "RECOVERY", "0", "{listcode}")
        End If
End Sub

Sub onValidate_CWCLAIM__IS_THRDTLS(bIsOnStart)
        If bIsOnStart = True Then
        	Call DefaultCheckboxTo("CWCLAIM", "IS_THRDTLS", "0", "{listcode}")
        End If
End Sub

Sub onValidate_CWCLAIM__IS_NAMAPP(bIsOnStart)
        If bIsOnStart = True Then
        	Call DefaultCheckboxTo("CWCLAIM", "IS_NAMAPP", "0", "{listcode}")
        End If
End Sub

Sub DoDefaults(bIsOnStart)
    Call WebRequired(bIsOnStart)
    Call onScreenLogic(bIsOnStart)
    Call onValidate_CWCLAIM__THIRDPARTY(bIsOnStart)
    Call onValidate_CWCLAIM__SALVAGE(bIsOnStart)
    Call onValidate_CWCLAIM__RECOVERY(bIsOnStart)
    Call onValidate_CWCLAIM__IS_THRDTLS(bIsOnStart)
    Call onValidate_CWCLAIM__IS_NAMAPP(bIsOnStart)
End Sub

Sub Start()
    Call DoDefaults(True)
End Sub

Sub Main()
    Call DoDefaults(False)
End Sub

