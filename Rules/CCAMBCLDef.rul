        Sub SetUserDetails()
            Dim vUserResult 
        	Dim lUserId
            Call Extras.CallNamedStoredProcedure(CLng(6722), CStr("GetUserDetails"), vUserResult,Array("sUserName", Extras.Username))
            If IsArray(vUserResult) Then
                Engine.Item("GENERAL").Item("LoggedInUser").Value = Extras.Username
        		lUserId = vUserResult(0,0)
        		Engine.Item("GENERAL").Item("LoggedInUserFullName").Value = vUserResult(1,0)
        		Engine.Item("GENERAL").Item("LoggedInUserEmail").Value = vUserResult(2,0)
            End If
        
            'Get user authority level
            Dim vExtraParameters
            Dim sRiskCode
            Dim vResults
        	Dim sProdCode
            sProdCode = Extras.ProductCode
        	
            vExtraParameters = array( "lUserId", lUserId, "sProdCode", sProdCode)
            Call Extras.CallNamedStoredProcedure(CLng(6722), "GetUserAuthorityLevel", vResults, vExtraParameters)
        	If IsArray(vResults) then
        		If vResults(0,0) <> "" Then
        			Engine.Item("GENERAL").Item("UserLevel").Value = Replace(vResults(0,0), "U","")
        			Engine.Item("GENERAL").Item("UserGroup").Value = vResults(0,0)
        		Else
        			'Assign Default Level to 1
        			Engine.Item("GENERAL").Item("UserLevel").Value = 1
        			Engine.Item("GENERAL").Item("UserGroup").Value = "U1"
        		End If
        	End IF
        End Sub

        '**********************************************************************************************
        'Load Defaults from UDLs
        '**********************************************************************************************
        Sub LoadDefaults()
         
          'Machinery Breakdown Defaults
          With Engine.Item("GENERAL")
        
        
        	.Item("EML").Value = Extras.GetField("UDL_MBEML_DEFAULTS", "Default_Value", "EML",Extras.CoverStartDate)
        	.Item("EML_MIN").Value = Extras.GetField("UDL_MBEML_DEFAULTS", "Default_Value", "EML_MIN",Extras.CoverStartDate)
        	
        
        	
          End With
          
        End Sub

        
        
        
        
        Dim iObjectInstanceCount
        
        Sub FindObjectInstanceCount(strScreenObjectName)
        	iObjectInstanceCount = 1
        
        	' strScreenObjectName is the object that is associate with this screen (if a child), or "" if the root screen.
        	If strScreenObjectName <> ""  Then
        		Dim instanceCount
        		
        		' How many instance of this object exist?
        		instanceCount = engine.count(strScreenObjectName)
        		
        		Dim i
        		for i = 1 to instanceCount
        			if engine.item(strScreenObjectName, i).item("OI").value = vAdditionalData(cAdditionalData_OIKey) then
        				iObjectInstanceCount = i
        			end if
        		next
        	End If
        End Sub

        Sub DefaultTextTo(strSourceObject, strSourceProperty, strValue, strIgnore)
        	Engine.Item(strSourceObject, iObjectInstanceCount).Item(strSourceProperty).Value = strValue
        End Sub

        
        Sub DefaultCommentTo(strSourceObject, strSourceProperty, strValue, strIgnore)
        	Engine.Item(strSourceObject, iObjectInstanceCount).Item(strSourceProperty).Value = strValue
        End Sub

        
        Sub DefaultIntegerTo(strSourceObject, strSourceProperty, strValue, strIgnore)
        	Engine.Item(strSourceObject, iObjectInstanceCount).Item(strSourceProperty).Value = CLng(strValue)
        End Sub

        
        Sub DefaultCheckboxTo(strSourceObject, strSourceProperty, strValue, strIgnore)
        	Engine.Item(strSourceObject, iObjectInstanceCount).Item(strSourceProperty).Value = CInt(strValue)
        End Sub

        
        Sub DefaultBooleanListTo(strSourceObject, strSourceProperty, strValue, strIgnore)
        	Engine.Item(strSourceObject, iObjectInstanceCount).Item(strSourceProperty).Value = CInt(strValue)
        End Sub

        
        Sub DefaultBooleanRadioTo(strSourceObject, strSourceProperty, strValue, strIgnore)
        	Engine.Item(strSourceObject, iObjectInstanceCount).Item(strSourceProperty).Value = CInt(strValue)
        End Sub

        
        Sub DefaultListTo(strSourceObject, strSourceProperty, strValue, strListCode)
        	If InStr(1, LCase(strValue), "code:", 1) = 1 Then
        		' The default value has been specified as a code (code:<thecode>).
        		Dim code
        		Dim effectiveDate
        		Dim version
        		
        		code = Mid(strValue, Len("code:")+1)
        		effectiveDate = Now()
        		version = 1
        		
        		Dim listItemId
        		listItemId = Extras.GetField(strListCode, strListCode + "_Id", code, effectiveDate, version)
        		
        		Engine.Item(strSourceObject, iObjectInstanceCount).Item(strSourceProperty).Value = CInt(listItemId)
        	Else
        		Engine.Item(strSourceObject, iObjectInstanceCount).Item(strSourceProperty).Value = CInt(strValue)
        	End If
        End Sub

        
        Sub DefaultRateListTo(strSourceObject, strSourceProperty, strValue, strListCode)
        	' TODO.
        End Sub

        
        Sub DefaultDateTo(strSourceObject, strSourceProperty, strValue, strIgnore)
        	
        	Dim location
        	Dim Interval
        	Dim Duration
        	Dim DateValue
        	
        	'Upper case the input
        	DateValue = UCase(strValue)
        	'Check to see if we want data AND  Time
        	location = InStr(1,DateValue,"DATETIME")
        	if location > 0 then
        		DateValue=  CDate(FormatDateTime(Now,0)) 'use the standard vb datetime
        	End If
        	'Check to see if TODAY is specified as a modifier
        	location  = InStr(1,DateValue,"TODAY")
        	If location > 0 Then
        		'Determine if we are adding values
        		location  = InStr(1,DateValue,"+")
        		If location > 0 Then 
        			Interval = Mid(DateValue,location + 1,1)
        			
        			If Interval = "Y" Then
        				Interval = "YYYY"
        			End If
        			
        			If Interval <> "" Then 
        				Duration  = Mid(DateValue,location + 2,Len(DateValue) - (location+1))
        				DateValue = DateAdd(Interval,Duration,CDate(FormatDateTime(Now,2)))	
        				
        			Else
        				'No Interval specified 
        				'Need an error here!!!!
        			End If	
        		Else 
        			'Check to see if we are subtracting values
        			location  =InStr(1,DateValue,"-")
        			If location > 0  Then 
        				Interval = Mid(DateValue,location + 1,1)
        				
        				If Interval <> "" Then 
        					Duration  = Mid(DateValue,location + 2,Len(DateValue) - (location+1))
        					DateValue = DateAdd(Interval, Duration * -1,CDate(FormatDateTime(Now,2)))	
        				Else
        					'No Interval specified 
        					'Need an error here!!!!
        				End If
        			Else
        				'No Function specified, so assume we are just using today's date as a shortdate
        				DateValue = CDate(FormatDateTime(Now,2))
        			End If
        			
        		End If
        		
        	End If	
        	
        	Engine.Item(strSourceObject, iObjectInstanceCount).Item(strSourceProperty).Value = CDate(DateValue)
        End Sub

        
        Sub DefaultCurrencyTo(strSourceObject, strSourceProperty, strValue, strIgnore)
        	Engine.Item(strSourceObject, iObjectInstanceCount).Item(strSourceProperty).Value = CDbl(strValue)
        End Sub

        
        Sub DefaultPercentageTo(strSourceObject, strSourceProperty, strValue, strIgnore)
        	Engine.Item(strSourceObject, iObjectInstanceCount).Item(strSourceProperty).Value = CDbl(strValue)
        End Sub

Sub WebRequired(bIsOnStart)
	If bIsOnStart = True Then
		Engine.NewObject("GENERAL")
		Engine.NewObject("ADDRESS")
		Engine.NewObject("MBREAK")
		Engine.NewObject("WC_POLICYHEADER")
		Engine.NewObject("SEQCNT_MB")
		Engine.NewObject("CLOSS")
		Engine.NewObject("DSTOCK")
		Engine.NewObject("SEQCNT_DS")
		Engine.NewObject("EXPOSURE_SUMMARY")
		Engine.NewObject("REFERRALS")
	End If
End Sub

Sub onScreenLogic(bIsOnStart)
        
        If bIsOnStart = True Or bIsOnStart = False Then
        	Call SetUserDetails()
        End If
        
        If bIsOnStart = True Then
        	Call LoadDefaults()
        End If
        ' The ScreenMain rule is added to every screen automatically.
        
        
        Call FindObjectInstanceCount("")
End Sub

Sub onValidate_GENERAL__IS_VAT(bIsOnStart)
        If bIsOnStart = True Then
        	Call DefaultListTo("GENERAL", "IS_VAT", "1", "UDL_CMA_VAT")
        End If
End Sub

Sub onValidate_GENERAL__IS_MTA_REASON(bIsOnStart)
        If bIsOnStart = True Then
        	Call DefaultCheckboxTo("GENERAL", "IS_MTA_REASON", "0", "{listcode}")
        End If
End Sub

Sub onValidate_MBREAK__IS_MACH(bIsOnStart)
        If bIsOnStart = True Then
        	Call DefaultCheckboxTo("MBREAK", "IS_MACH", "1", "{listcode}")
        End If
End Sub

Sub onValidate_MBREAK__IS_CL_BI(bIsOnStart)
        If bIsOnStart = True Then
        	Call DefaultCheckboxTo("MBREAK", "IS_CL_BI", "0", "{listcode}")
        End If
End Sub

Sub onValidate_MBREAK__IS_DOS(bIsOnStart)
        If bIsOnStart = True Then
        	Call DefaultCheckboxTo("MBREAK", "IS_DOS", "0", "{listcode}")
        End If
End Sub

Sub onValidate_GENERAL__NEXUSQS(bIsOnStart)
        If bIsOnStart = True Then
        	Call DefaultIntegerTo("GENERAL", "NEXUSQS", "0", "{listcode}")
        End If
End Sub

Sub onValidate_MBREAK__FLAT_PREMIUM(bIsOnStart)
        If bIsOnStart = True Then
        	Call DefaultCheckboxTo("MBREAK", "FLAT_PREMIUM", "1", "{listcode}")
        End If
End Sub

Sub onValidate_MBREAK__IS_ACPC(bIsOnStart)
        If bIsOnStart = True Then
        	Call DefaultCheckboxTo("MBREAK", "IS_ACPC", "0", "{listcode}")
        End If
End Sub

Sub onValidate_MBREAK__IS_EDO(bIsOnStart)
        If bIsOnStart = True Then
        	Call DefaultCheckboxTo("MBREAK", "IS_EDO", "0", "{listcode}")
        End If
End Sub

Sub onValidate_MBREAK__IS_FMR(bIsOnStart)
        If bIsOnStart = True Then
        	Call DefaultCheckboxTo("MBREAK", "IS_FMR", "0", "{listcode}")
        End If
End Sub

Sub onValidate_MBREAK__IS_RIOT(bIsOnStart)
        If bIsOnStart = True Then
        	Call DefaultCheckboxTo("MBREAK", "IS_RIOT", "0", "{listcode}")
        End If
End Sub

Sub onValidate_CLOSS__FLAT_PREMIUM(bIsOnStart)
        If bIsOnStart = True Then
        	Call DefaultCheckboxTo("CLOSS", "FLAT_PREMIUM", "1", "{listcode}")
        End If
End Sub

Sub onValidate_CLOSS__IS_ACPC(bIsOnStart)
        If bIsOnStart = True Then
        	Call DefaultCheckboxTo("CLOSS", "IS_ACPC", "0", "{listcode}")
        End If
End Sub

Sub onValidate_CLOSS__IS_AICOW(bIsOnStart)
        If bIsOnStart = True Then
        	Call DefaultCheckboxTo("CLOSS", "IS_AICOW", "0", "{listcode}")
        End If
End Sub

Sub onValidate_CLOSS__IS_ICOW(bIsOnStart)
        If bIsOnStart = True Then
        	Call DefaultCheckboxTo("CLOSS", "IS_ICOW", "0", "{listcode}")
        End If
End Sub

Sub onValidate_DSTOCK__FLAT_PREMIUM(bIsOnStart)
        If bIsOnStart = True Then
        	Call DefaultCheckboxTo("DSTOCK", "FLAT_PREMIUM", "1", "{listcode}")
        End If
End Sub

Sub onValidate_REFERRALS__RefCount(bIsOnStart)
        If bIsOnStart = True Then
        	Call DefaultIntegerTo("REFERRALS", "RefCount", "0", "{listcode}")
        End If
End Sub

Sub DoDefaults(bIsOnStart)
    Call WebRequired(bIsOnStart)
    Call onScreenLogic(bIsOnStart)
    Call onValidate_GENERAL__IS_VAT(bIsOnStart)
    Call onValidate_GENERAL__IS_MTA_REASON(bIsOnStart)
    Call onValidate_MBREAK__IS_MACH(bIsOnStart)
    Call onValidate_MBREAK__IS_CL_BI(bIsOnStart)
    Call onValidate_MBREAK__IS_DOS(bIsOnStart)
    Call onValidate_GENERAL__NEXUSQS(bIsOnStart)
    Call onValidate_MBREAK__FLAT_PREMIUM(bIsOnStart)
    Call onValidate_MBREAK__IS_ACPC(bIsOnStart)
    Call onValidate_MBREAK__IS_EDO(bIsOnStart)
    Call onValidate_MBREAK__IS_FMR(bIsOnStart)
    Call onValidate_MBREAK__IS_RIOT(bIsOnStart)
    Call onValidate_CLOSS__FLAT_PREMIUM(bIsOnStart)
    Call onValidate_CLOSS__IS_ACPC(bIsOnStart)
    Call onValidate_CLOSS__IS_AICOW(bIsOnStart)
    Call onValidate_CLOSS__IS_ICOW(bIsOnStart)
    Call onValidate_DSTOCK__FLAT_PREMIUM(bIsOnStart)
    Call onValidate_REFERRALS__RefCount(bIsOnStart)
End Sub

Sub Start()
    Call DoDefaults(True)
End Sub

Sub Main()
    Call DoDefaults(False)
End Sub

